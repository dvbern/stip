import {
  ChangeDetectionStrategy,
  Component,
  computed,
  effect,
  inject,
  OnInit,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { GesuchAppUiStepFormButtonsComponent } from '@dv/gesuch-app/ui/step-form-buttons';
import { Store } from '@ngrx/store';
import { TranslateModule } from '@ngx-translate/core';

import { GesuchAppEventGesuchFormEltern } from '@dv/gesuch-app/event/gesuch-form-eltern';
import { GesuchAppPatternGesuchStepLayoutComponent } from '@dv/gesuch-app/pattern/gesuch-step-layout';
import { ElternteilCardComponent } from './elternteil-card/elternteil-card.component';

import { selectGesuchAppFeatureGesuchFormElternView } from './gesuch-app-feature-gesuch-form-eltern.selector';
import { Anrede, ElternDTO, SharedModelGesuch } from '@dv/shared/model/gesuch';
import { GesuchAppFeatureGesuchFormElternEditorComponent } from '../gesuch-app-feature-gesuch-form-eltern-editor/gesuch-app-feature-gesuch-form-eltern-editor.component';
import { GesuchFormSteps } from '@dv/gesuch-app/model/gesuch-form';
import { selectLanguage } from '@dv/shared/data-access/language';
import { SharedDataAccessStammdatenApiEvents } from '@dv/shared/data-access/stammdaten';

@Component({
  selector: 'dv-gesuch-app-feature-gesuch-form-eltern',
  standalone: true,
  imports: [
    CommonModule,
    TranslateModule,
    GesuchAppPatternGesuchStepLayoutComponent,
    GesuchAppFeatureGesuchFormElternEditorComponent,
    ElternteilCardComponent,
    GesuchAppUiStepFormButtonsComponent,
  ],
  templateUrl: './gesuch-app-feature-gesuch-form-eltern.component.html',
  styleUrls: ['./gesuch-app-feature-gesuch-form-eltern.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class GesuchAppFeatureGesuchFormElternComponent implements OnInit {
  private store = inject(Store);

  laenderSig = computed(() => {
    return this.view$().laender;
  });
  languageSig = this.store.selectSignal(selectLanguage);

  view$ = this.store.selectSignal(selectGesuchAppFeatureGesuchFormElternView);

  editedElternteil?: Partial<ElternDTO>;

  ngOnInit(): void {
    this.store.dispatch(GesuchAppEventGesuchFormEltern.init());
    this.store.dispatch(SharedDataAccessStammdatenApiEvents.init());
  }

  trackByIndex(index: number) {
    return index;
  }

  handleEdit(elternteil: ElternDTO) {
    this.editedElternteil = elternteil;
  }

  handleAddElternteil(geschlecht: Anrede) {
    this.editedElternteil = {
      geschlecht: geschlecht,
    };
  }

  handleEditorSave(elternteil: ElternDTO) {
    this.store.dispatch(
      GesuchAppEventGesuchFormEltern.saveSubformTriggered({
        gesuch: this.buildUpdatedGesuchWithUpdatedElternteil(elternteil),
        origin: GesuchFormSteps.ELTERN,
      })
    );
    this.editedElternteil = undefined;
  }

  public handleDeleteElternteil(id: string) {
    this.store.dispatch(
      GesuchAppEventGesuchFormEltern.saveSubformTriggered({
        gesuch: this.buildUpdatedGesuchWithDeletedElternteil(id),
        origin: GesuchFormSteps.ELTERN,
      })
    );
    this.editedElternteil = undefined;
  }

  handleContinue() {
    const { gesuch } = this.view$();
    this.store.dispatch(
      GesuchAppEventGesuchFormEltern.nextTriggered({
        id: gesuch!.id!,
        origin: GesuchFormSteps.ELTERN,
      })
    );
  }

  handleEditorClose() {
    this.editedElternteil = undefined;
  }

  private buildUpdatedGesuchWithDeletedElternteil(id: string) {
    const gesuch: Partial<SharedModelGesuch> = this.view$().gesuch!;
    const updatedElternContainers = gesuch?.elternContainers!.filter(
      (elternContainer) => elternContainer.elternSB?.id !== id
    );

    return {
      ...gesuch,
      elternContainers: updatedElternContainers,
    };
  }

  private buildUpdatedGesuchWithUpdatedElternteil(elternteil: ElternDTO) {
    const gesuch: SharedModelGesuch = this.view$().gesuch!;
    // update existing elternteil if found
    const updatedElternContainers =
      gesuch?.elternContainers?.map((elternContainer) => {
        if (elternContainer.elternSB?.id === elternteil.id) {
          return {
            ...elternContainer,
            elternSB: elternteil,
          };
        } else {
          return elternContainer;
        }
      }) ?? [];
    // add new elternteil if not found
    if (!elternteil.id) {
      // TODO new elternteil doesnt have ID, will be added by backend?
      updatedElternContainers.push({
        elternSB: {
          ...elternteil,
          id: 'generated by backend? or FE uuid? ' + elternteil.vorname,
        },
        id: 'generated by backend? or FE uuid? ' + elternteil.vorname,
      });
    }
    return {
      ...gesuch,
      elternContainers: updatedElternContainers,
    };
  }

  protected readonly GesuchFormSteps = GesuchFormSteps;
  protected readonly Anrede = Anrede;
}
