import {
  ChangeDetectionStrategy,
  Component,
  effect,
  inject,
  OnInit,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { Store } from '@ngrx/store';
import { Actions } from '@ngrx/effects';
import { toSignal } from '@angular/core/rxjs-interop';
import { TranslateModule } from '@ngx-translate/core';

import { GesuchAppEventGesuchFormEltern } from '@dv/gesuch-app/event/gesuch-form-eltern';
import { GesuchAppPatternGesuchStepLayoutComponent } from '@dv/gesuch-app/pattern/gesuch-step-layout';

import { selectGesuchAppFeatureGesuchFormElternView } from './gesuch-app-feature-gesuch-form-eltern.selector';
import { ElternDTO, SharedModelGesuch } from '@dv/shared/model/gesuch';
import { GesuchAppFeatureGesuchFormElternEditorComponent } from '../gesuch-app-feature-gesuch-form-eltern-editor/gesuch-app-feature-gesuch-form-eltern-editor.component';

@Component({
  selector: 'dv-gesuch-app-feature-gesuch-form-eltern',
  standalone: true,
  imports: [
    CommonModule,
    TranslateModule,
    GesuchAppPatternGesuchStepLayoutComponent,
    GesuchAppFeatureGesuchFormElternEditorComponent,
  ],
  templateUrl: './gesuch-app-feature-gesuch-form-eltern.component.html',
  styleUrls: ['./gesuch-app-feature-gesuch-form-eltern.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class GesuchAppFeatureGesuchFormElternComponent implements OnInit {
  private store = inject(Store);
  private actions = inject(Actions);

  view$ = this.store.selectSignal(selectGesuchAppFeatureGesuchFormElternView);

  editedParent?: ElternDTO;

  constructor() {
    console.log('XXX constructor');
    const actions$ = toSignal(this.actions);
    effect(() => {
      const a = actions$();
      console.log(a);
    });
  }

  ngOnInit(): void {
    this.store.dispatch(GesuchAppEventGesuchFormEltern.init());
  }

  trackByIndex(index: number) {
    return index;
  }

  handleEdit(parent: ElternDTO) {
    this.editedParent = parent;
  }

  handleEditorSave(parent: ElternDTO) {
    this.store.dispatch(
      GesuchAppEventGesuchFormEltern.saveParentTriggered({
        gesuch: this.buildUpdatedGesuchWithUpdatedParent(parent),
      })
    );
    this.editedParent = undefined;
  }

  handleEditorCancel() {
    this.editedParent = undefined;
  }

  private buildUpdatedGesuchWithUpdatedParent(parent: ElternDTO) {
    const gesuch: Partial<SharedModelGesuch> = this.view$().gesuch!;
    // update existing parent if found
    const updatedElternContainers =
      gesuch?.elternContainers?.map((elternContainer) => {
        if (elternContainer.elternSB?.id === parent.id) {
          return {
            ...elternContainer,
            elternSB: parent,
          };
        } else {
          return elternContainer;
        }
      }) ?? [];
    // add new parent if not found
    if (!parent.id) {
      // TODO new parent doesnt have ID, will be added by backend?
      updatedElternContainers.push({
        elternSB: parent,
        id: 'generated by backend? or FE uuid?',
      });
    }
    return {
      ...gesuch,
      elternContainers: updatedElternContainers,
    };
  }
}
