/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ValidationWarningDtoSpec
 */
@JsonPropertyOrder({
  ValidationWarningDtoSpec.JSON_PROPERTY_PROPERTY_PATH,
  ValidationWarningDtoSpec.JSON_PROPERTY_MESSAGE_TEMPLATE,
  ValidationWarningDtoSpec.JSON_PROPERTY_MESSAGE
})
@JsonTypeName("ValidationWarning")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ValidationWarningDtoSpec {
  public static final String JSON_PROPERTY_PROPERTY_PATH = "propertyPath";
  private String propertyPath;

  public static final String JSON_PROPERTY_MESSAGE_TEMPLATE = "messageTemplate";
  private String messageTemplate;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public ValidationWarningDtoSpec() {
  }

  public ValidationWarningDtoSpec propertyPath(String propertyPath) {
    
    this.propertyPath = propertyPath;
    return this;
  }

   /**
   * Get propertyPath
   * @return propertyPath
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPropertyPath() {
    return propertyPath;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropertyPath(String propertyPath) {
    this.propertyPath = propertyPath;
  }


  public ValidationWarningDtoSpec messageTemplate(String messageTemplate) {
    
    this.messageTemplate = messageTemplate;
    return this;
  }

   /**
   * Get messageTemplate
   * @return messageTemplate
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessageTemplate() {
    return messageTemplate;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessageTemplate(String messageTemplate) {
    this.messageTemplate = messageTemplate;
  }


  public ValidationWarningDtoSpec message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(String message) {
    this.message = message;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidationWarningDtoSpec validationWarning = (ValidationWarningDtoSpec) o;
    return Objects.equals(this.propertyPath, validationWarning.propertyPath) &&
        Objects.equals(this.messageTemplate, validationWarning.messageTemplate) &&
        Objects.equals(this.message, validationWarning.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyPath, messageTemplate, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidationWarningDtoSpec {\n");
    sb.append("    propertyPath: ").append(toIndentedString(propertyPath)).append("\n");
    sb.append("    messageTemplate: ").append(toIndentedString(messageTemplate)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

