/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.dto;

import java.util.Objects;
import java.util.Arrays;
import ch.dvbern.stip.generated.dto.TranchenBerechnungsresultatDtoSpec;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Resultat der Berechnung (gesamtes Gesuch)
 */
@JsonPropertyOrder({
  BerechnungsresultatDtoSpec.JSON_PROPERTY_BERECHNUNG,
  BerechnungsresultatDtoSpec.JSON_PROPERTY_TRANCHEN_BERECHNUNGSRESULTATE
})
@JsonTypeName("Berechnungsresultat")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BerechnungsresultatDtoSpec {
  public static final String JSON_PROPERTY_BERECHNUNG = "berechnung";
  private Integer berechnung;

  public static final String JSON_PROPERTY_TRANCHEN_BERECHNUNGSRESULTATE = "tranchenBerechnungsresultate";
  private List<TranchenBerechnungsresultatDtoSpec> tranchenBerechnungsresultate;

  public BerechnungsresultatDtoSpec() {
  }

  public BerechnungsresultatDtoSpec berechnung(Integer berechnung) {
    
    this.berechnung = berechnung;
    return this;
  }

   /**
   * Berechneter Stpendiumsanspruch für das Gesuch
   * @return berechnung
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BERECHNUNG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBerechnung() {
    return berechnung;
  }


  @JsonProperty(JSON_PROPERTY_BERECHNUNG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBerechnung(Integer berechnung) {
    this.berechnung = berechnung;
  }


  public BerechnungsresultatDtoSpec tranchenBerechnungsresultate(List<TranchenBerechnungsresultatDtoSpec> tranchenBerechnungsresultate) {
    
    this.tranchenBerechnungsresultate = tranchenBerechnungsresultate;
    return this;
  }

  public BerechnungsresultatDtoSpec addTranchenBerechnungsresultateItem(TranchenBerechnungsresultatDtoSpec tranchenBerechnungsresultateItem) {
    if (this.tranchenBerechnungsresultate == null) {
      this.tranchenBerechnungsresultate = new ArrayList<>();
    }
    this.tranchenBerechnungsresultate.add(tranchenBerechnungsresultateItem);
    return this;
  }

   /**
   * Resultate der Berechnung für die Tranchen des Gesuchs
   * @return tranchenBerechnungsresultate
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANCHEN_BERECHNUNGSRESULTATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TranchenBerechnungsresultatDtoSpec> getTranchenBerechnungsresultate() {
    return tranchenBerechnungsresultate;
  }


  @JsonProperty(JSON_PROPERTY_TRANCHEN_BERECHNUNGSRESULTATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTranchenBerechnungsresultate(List<TranchenBerechnungsresultatDtoSpec> tranchenBerechnungsresultate) {
    this.tranchenBerechnungsresultate = tranchenBerechnungsresultate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BerechnungsresultatDtoSpec berechnungsresultat = (BerechnungsresultatDtoSpec) o;
    return Objects.equals(this.berechnung, berechnungsresultat.berechnung) &&
        Objects.equals(this.tranchenBerechnungsresultate, berechnungsresultat.tranchenBerechnungsresultate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(berechnung, tranchenBerechnungsresultate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BerechnungsresultatDtoSpec {\n");
    sb.append("    berechnung: ").append(toIndentedString(berechnung)).append("\n");
    sb.append("    tranchenBerechnungsresultate: ").append(toIndentedString(tranchenBerechnungsresultate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

