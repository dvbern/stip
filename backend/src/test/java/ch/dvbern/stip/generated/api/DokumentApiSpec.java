/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.CustomDokumentTypCreateDtoSpec;
import ch.dvbern.stip.generated.dto.CustomDokumentTypDtoSpec;
import ch.dvbern.stip.generated.dto.DokumentArtDtoSpec;
import ch.dvbern.stip.generated.dto.DokumentTypDtoSpec;
import java.io.File;
import ch.dvbern.stip.generated.dto.FileDownloadTokenDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchDokumentAblehnenRequestDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchDokumentDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchDokumentKommentarDtoSpec;
import ch.dvbern.stip.generated.dto.NullableGesuchDokumentDtoSpec;
import java.util.UUID;
import ch.dvbern.stip.generated.dto.UnterschriftenblattDokumentDtoSpec;
import ch.dvbern.stip.generated.dto.UnterschriftenblattDokumentTypDtoSpec;
import ch.dvbern.stip.generated.dto.ValidationReportDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class DokumentApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private DokumentApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static DokumentApiSpec dokument(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new DokumentApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createCustomDokumentTyp(),
                createDokument(),
                createUnterschriftenblatt(),
                deleteCustomDokumentTyp(),
                deleteDokument(),
                deleteUnterschriftenblattDokument(),
                gesuchDokumentAblehnen(),
                gesuchDokumentAkzeptieren(),
                getAllCustomDokumentTypes(),
                getCustomGesuchDokumenteForTypGS(),
                getCustomGesuchDokumenteForTypSB(),
                getDokument(),
                getDokumentDownloadToken(),
                getGesuchDokumentKommentare(),
                getGesuchDokumenteForTypGS(),
                getGesuchDokumenteForTypSB(),
                getUnterschriftenblaetterForGesuch(),
                uploadCustomGesuchDokument()
        );
    }

    public CreateCustomDokumentTypOper createCustomDokumentTyp() {
        return new CreateCustomDokumentTypOper(createReqSpec());
    }

    public CreateDokumentOper createDokument() {
        return new CreateDokumentOper(createReqSpec());
    }

    public CreateUnterschriftenblattOper createUnterschriftenblatt() {
        return new CreateUnterschriftenblattOper(createReqSpec());
    }

    public DeleteCustomDokumentTypOper deleteCustomDokumentTyp() {
        return new DeleteCustomDokumentTypOper(createReqSpec());
    }

    public DeleteDokumentOper deleteDokument() {
        return new DeleteDokumentOper(createReqSpec());
    }

    public DeleteUnterschriftenblattDokumentOper deleteUnterschriftenblattDokument() {
        return new DeleteUnterschriftenblattDokumentOper(createReqSpec());
    }

    public GesuchDokumentAblehnenOper gesuchDokumentAblehnen() {
        return new GesuchDokumentAblehnenOper(createReqSpec());
    }

    public GesuchDokumentAkzeptierenOper gesuchDokumentAkzeptieren() {
        return new GesuchDokumentAkzeptierenOper(createReqSpec());
    }

    public GetAllCustomDokumentTypesOper getAllCustomDokumentTypes() {
        return new GetAllCustomDokumentTypesOper(createReqSpec());
    }

    public GetCustomGesuchDokumenteForTypGSOper getCustomGesuchDokumenteForTypGS() {
        return new GetCustomGesuchDokumenteForTypGSOper(createReqSpec());
    }

    public GetCustomGesuchDokumenteForTypSBOper getCustomGesuchDokumenteForTypSB() {
        return new GetCustomGesuchDokumenteForTypSBOper(createReqSpec());
    }

    public GetDokumentOper getDokument() {
        return new GetDokumentOper(createReqSpec());
    }

    public GetDokumentDownloadTokenOper getDokumentDownloadToken() {
        return new GetDokumentDownloadTokenOper(createReqSpec());
    }

    public GetGesuchDokumentKommentareOper getGesuchDokumentKommentare() {
        return new GetGesuchDokumentKommentareOper(createReqSpec());
    }

    public GetGesuchDokumenteForTypGSOper getGesuchDokumenteForTypGS() {
        return new GetGesuchDokumenteForTypGSOper(createReqSpec());
    }

    public GetGesuchDokumenteForTypSBOper getGesuchDokumenteForTypSB() {
        return new GetGesuchDokumenteForTypSBOper(createReqSpec());
    }

    public GetUnterschriftenblaetterForGesuchOper getUnterschriftenblaetterForGesuch() {
        return new GetUnterschriftenblaetterForGesuchOper(createReqSpec());
    }

    public UploadCustomGesuchDokumentOper uploadCustomGesuchDokument() {
        return new UploadCustomGesuchDokumentOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public DokumentApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * create CustomDokumentTyp
     * 
     *
     * @see #body  (required)
     * return GesuchDokumentDtoSpec
     */
    public static class CreateCustomDokumentTypOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuchDokument/customGesuchDokument/";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateCustomDokumentTypOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuchDokument/customGesuchDokument/
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuchDokument/customGesuchDokument/
         * @param handler handler
         * @return GesuchDokumentDtoSpec
         */
        public GesuchDokumentDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDokumentDtoSpec> type = new TypeRef<GesuchDokumentDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param customDokumentTypCreateDtoSpec (CustomDokumentTypCreateDtoSpec)  (required)
         * @return operation
         */
        public CreateCustomDokumentTypOper body(CustomDokumentTypCreateDtoSpec customDokumentTypCreateDtoSpec) {
            reqSpec.setBody(customDokumentTypCreateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateCustomDokumentTypOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateCustomDokumentTypOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Upload a file for the given Typ to the Tranche
     * 
     *
     * @see #dokumentTypPath  (required)
     * @see #gesuchTrancheIdPath  (required)
     * @see #fileUploadMultiPart  (required)
     */
    public static class CreateDokumentOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuchDokument/{gesuchTrancheId}/{dokumentTyp}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateDokumentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuchDokument/{gesuchTrancheId}/{dokumentTyp}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String DOKUMENT_TYP_PATH = "dokumentTyp";

        /**
         * @param dokumentTyp (DokumentTypDtoSpec)  (required)
         * @return operation
         */
        public CreateDokumentOper dokumentTypPath(Object dokumentTyp) {
            reqSpec.addPathParam(DOKUMENT_TYP_PATH, dokumentTyp);
            return this;
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public CreateDokumentOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param fileUpload (File)  (required)
         * @return operation
         */
         public CreateDokumentOper fileUploadMultiPart(File fileUpload) {
            reqSpec.addMultiPart(fileUpload);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateDokumentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateDokumentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #unterschriftenblattTypPath  (required)
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * @see #fileUploadMultiPart  (required)
     */
    public static class CreateUnterschriftenblattOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/unterschriftenblatt/{gesuchId}/{unterschriftenblattTyp}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateUnterschriftenblattOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /unterschriftenblatt/{gesuchId}/{unterschriftenblattTyp}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String UNTERSCHRIFTENBLATT_TYP_PATH = "unterschriftenblattTyp";

        /**
         * @param unterschriftenblattTyp (UnterschriftenblattDokumentTypDtoSpec)  (required)
         * @return operation
         */
        public CreateUnterschriftenblattOper unterschriftenblattTypPath(Object unterschriftenblattTyp) {
            reqSpec.addPathParam(UNTERSCHRIFTENBLATT_TYP_PATH, unterschriftenblattTyp);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public CreateUnterschriftenblattOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param fileUpload (File)  (required)
         * @return operation
         */
         public CreateUnterschriftenblattOper fileUploadMultiPart(File fileUpload) {
            reqSpec.addMultiPart(fileUpload);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateUnterschriftenblattOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateUnterschriftenblattOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * delete a customDokumentTyp
     * 
     *
     * @see #customDokumentTypIdPath  (required)
     */
    public static class DeleteCustomDokumentTypOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/gesuchDokument/customGesuchDokument/{customDokumentTypId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteCustomDokumentTypOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /gesuchDokument/customGesuchDokument/{customDokumentTypId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_DOKUMENT_TYP_ID_PATH = "customDokumentTypId";

        /**
         * @param customDokumentTypId (UUID)  (required)
         * @return operation
         */
        public DeleteCustomDokumentTypOper customDokumentTypIdPath(Object customDokumentTypId) {
            reqSpec.addPathParam(CUSTOM_DOKUMENT_TYP_ID_PATH, customDokumentTypId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteCustomDokumentTypOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteCustomDokumentTypOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * deletes a Dokument
     * 
     *
     * @see #dokumentIdPath  (required)
     */
    public static class DeleteDokumentOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/dokument/{dokumentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteDokumentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /dokument/{dokumentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String DOKUMENT_ID_PATH = "dokumentId";

        /**
         * @param dokumentId (UUID)  (required)
         * @return operation
         */
        public DeleteDokumentOper dokumentIdPath(Object dokumentId) {
            reqSpec.addPathParam(DOKUMENT_ID_PATH, dokumentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteDokumentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteDokumentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * deletes a Dokument
     * 
     *
     * @see #dokumentIdPath  (required)
     */
    public static class DeleteUnterschriftenblattDokumentOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/unterschriftenblatt/dokument/{dokumentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteUnterschriftenblattDokumentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /unterschriftenblatt/dokument/{dokumentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String DOKUMENT_ID_PATH = "dokumentId";

        /**
         * @param dokumentId (UUID)  (required)
         * @return operation
         */
        public DeleteUnterschriftenblattDokumentOper dokumentIdPath(Object dokumentId) {
            reqSpec.addPathParam(DOKUMENT_ID_PATH, dokumentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteUnterschriftenblattDokumentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteUnterschriftenblattDokumentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchDokumentIdPath  (required)
     * @see #body  (optional)
     */
    public static class GesuchDokumentAblehnenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuchDokument/{gesuchDokumentId}/ablehnen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchDokumentAblehnenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuchDokument/{gesuchDokumentId}/ablehnen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param gesuchDokumentAblehnenRequestDtoSpec (GesuchDokumentAblehnenRequestDtoSpec)  (optional)
         * @return operation
         */
        public GesuchDokumentAblehnenOper body(GesuchDokumentAblehnenRequestDtoSpec gesuchDokumentAblehnenRequestDtoSpec) {
            reqSpec.setBody(gesuchDokumentAblehnenRequestDtoSpec);
            return this;
        }

        public static final String GESUCH_DOKUMENT_ID_PATH = "gesuchDokumentId";

        /**
         * @param gesuchDokumentId (UUID)  (required)
         * @return operation
         */
        public GesuchDokumentAblehnenOper gesuchDokumentIdPath(Object gesuchDokumentId) {
            reqSpec.addPathParam(GESUCH_DOKUMENT_ID_PATH, gesuchDokumentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchDokumentAblehnenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchDokumentAblehnenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchDokumentIdPath  (required)
     */
    public static class GesuchDokumentAkzeptierenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuchDokument/{gesuchDokumentId}/akzeptieren";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchDokumentAkzeptierenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuchDokument/{gesuchDokumentId}/akzeptieren
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_DOKUMENT_ID_PATH = "gesuchDokumentId";

        /**
         * @param gesuchDokumentId (UUID)  (required)
         * @return operation
         */
        public GesuchDokumentAkzeptierenOper gesuchDokumentIdPath(Object gesuchDokumentId) {
            reqSpec.addPathParam(GESUCH_DOKUMENT_ID_PATH, gesuchDokumentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchDokumentAkzeptierenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchDokumentAkzeptierenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * get All CustomDokumentTypDtos Of Tranche
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return List&lt;CustomDokumentTypDtoSpec&gt;
     */
    public static class GetAllCustomDokumentTypesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchDokument/customGesuchDokuments/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAllCustomDokumentTypesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchDokument/customGesuchDokuments/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchDokument/customGesuchDokuments/{gesuchTrancheId}
         * @param handler handler
         * @return List&lt;CustomDokumentTypDtoSpec&gt;
         */
        public List<CustomDokumentTypDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<CustomDokumentTypDtoSpec>> type = new TypeRef<List<CustomDokumentTypDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetAllCustomDokumentTypesOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAllCustomDokumentTypesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAllCustomDokumentTypesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returniert das GesuchDokument mit der gegebenen Tranche Id und alle Dokumente die dazu gehoeren. Für den GS
     * 
     *
     * @see #customDokumentTypIdPath  (required)
     * return NullableGesuchDokumentDtoSpec
     */
    public static class GetCustomGesuchDokumenteForTypGSOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/customGesuchDokument/gs/{customDokumentTypId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCustomGesuchDokumenteForTypGSOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /customGesuchDokument/gs/{customDokumentTypId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /customGesuchDokument/gs/{customDokumentTypId}
         * @param handler handler
         * @return NullableGesuchDokumentDtoSpec
         */
        public NullableGesuchDokumentDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<NullableGesuchDokumentDtoSpec> type = new TypeRef<NullableGesuchDokumentDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String CUSTOM_DOKUMENT_TYP_ID_PATH = "customDokumentTypId";

        /**
         * @param customDokumentTypId (UUID)  (required)
         * @return operation
         */
        public GetCustomGesuchDokumenteForTypGSOper customDokumentTypIdPath(Object customDokumentTypId) {
            reqSpec.addPathParam(CUSTOM_DOKUMENT_TYP_ID_PATH, customDokumentTypId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCustomGesuchDokumenteForTypGSOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCustomGesuchDokumenteForTypGSOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returniert das GesuchDokument mit der gegebenen Tranche Id und alle Dokumente die dazu gehoeren. Für den SB
     * 
     *
     * @see #customDokumentTypIdPath  (required)
     * return NullableGesuchDokumentDtoSpec
     */
    public static class GetCustomGesuchDokumenteForTypSBOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/customGesuchDokument/sb/{customDokumentTypId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCustomGesuchDokumenteForTypSBOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /customGesuchDokument/sb/{customDokumentTypId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /customGesuchDokument/sb/{customDokumentTypId}
         * @param handler handler
         * @return NullableGesuchDokumentDtoSpec
         */
        public NullableGesuchDokumentDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<NullableGesuchDokumentDtoSpec> type = new TypeRef<NullableGesuchDokumentDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String CUSTOM_DOKUMENT_TYP_ID_PATH = "customDokumentTypId";

        /**
         * @param customDokumentTypId (UUID)  (required)
         * @return operation
         */
        public GetCustomGesuchDokumenteForTypSBOper customDokumentTypIdPath(Object customDokumentTypId) {
            reqSpec.addPathParam(CUSTOM_DOKUMENT_TYP_ID_PATH, customDokumentTypId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCustomGesuchDokumenteForTypSBOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCustomGesuchDokumenteForTypSBOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * get Dokument
     * 
     *
     * @see #tokenQuery  (required)
     * @see #dokumentArtPath  (required)
     * return File
     */
    public static class GetDokumentOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dokument/{dokumentArt}/download";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDokumentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/octet-stream");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dokument/{dokumentArt}/download
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dokument/{dokumentArt}/download
         * @param handler handler
         * @return File
         */
        public File executeAs(Function<Response, Response> handler) {
            TypeRef<File> type = new TypeRef<File>(){};
            return execute(handler).as(type);
        }

        public static final String DOKUMENT_ART_PATH = "dokumentArt";

        /**
         * @param dokumentArt (DokumentArtDtoSpec)  (required)
         * @return operation
         */
        public GetDokumentOper dokumentArtPath(Object dokumentArt) {
            reqSpec.addPathParam(DOKUMENT_ART_PATH, dokumentArt);
            return this;
        }

        public static final String TOKEN_QUERY = "token";

        /**
         * @param token (String)  (required)
         * @return operation
         */
        public GetDokumentOper tokenQuery(Object... token) {
            reqSpec.addQueryParam(TOKEN_QUERY, token);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDokumentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDokumentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * get Dokument Download Token
     * 
     *
     * @see #dokumentIdPath  (required)
     * return FileDownloadTokenDtoSpec
     */
    public static class GetDokumentDownloadTokenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/dokument/{dokumentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDokumentDownloadTokenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /dokument/{dokumentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /dokument/{dokumentId}
         * @param handler handler
         * @return FileDownloadTokenDtoSpec
         */
        public FileDownloadTokenDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<FileDownloadTokenDtoSpec> type = new TypeRef<FileDownloadTokenDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String DOKUMENT_ID_PATH = "dokumentId";

        /**
         * @param dokumentId (UUID)  (required)
         * @return operation
         */
        public GetDokumentDownloadTokenOper dokumentIdPath(Object dokumentId) {
            reqSpec.addPathParam(DOKUMENT_ID_PATH, dokumentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDokumentDownloadTokenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDokumentDownloadTokenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returniert GesuchDokumentKommentare zu einem GesuchDokument.
     * 
     *
     * @see #gesuchDokumentIdPath  (required)
     * return List&lt;GesuchDokumentKommentarDtoSpec&gt;
     */
    public static class GetGesuchDokumentKommentareOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchDokument/{gesuchDokumentId}/kommentare";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchDokumentKommentareOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchDokument/{gesuchDokumentId}/kommentare
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchDokument/{gesuchDokumentId}/kommentare
         * @param handler handler
         * @return List&lt;GesuchDokumentKommentarDtoSpec&gt;
         */
        public List<GesuchDokumentKommentarDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchDokumentKommentarDtoSpec>> type = new TypeRef<List<GesuchDokumentKommentarDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_DOKUMENT_ID_PATH = "gesuchDokumentId";

        /**
         * @param gesuchDokumentId (UUID)  (required)
         * @return operation
         */
        public GetGesuchDokumentKommentareOper gesuchDokumentIdPath(Object gesuchDokumentId) {
            reqSpec.addPathParam(GESUCH_DOKUMENT_ID_PATH, gesuchDokumentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchDokumentKommentareOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchDokumentKommentareOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returniert das GesuchDokument mit der gegebenen Tranche Id und alle Dokumente die dazu gehoeren. Historisiert für den GS
     * 
     *
     * @see #dokumentTypPath  (required)
     * @see #gesuchTrancheIdPath  (required)
     * return NullableGesuchDokumentDtoSpec
     */
    public static class GetGesuchDokumenteForTypGSOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchDokument/gs/{gesuchTrancheId}/{dokumentTyp}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchDokumenteForTypGSOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchDokument/gs/{gesuchTrancheId}/{dokumentTyp}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchDokument/gs/{gesuchTrancheId}/{dokumentTyp}
         * @param handler handler
         * @return NullableGesuchDokumentDtoSpec
         */
        public NullableGesuchDokumentDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<NullableGesuchDokumentDtoSpec> type = new TypeRef<NullableGesuchDokumentDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String DOKUMENT_TYP_PATH = "dokumentTyp";

        /**
         * @param dokumentTyp (DokumentTypDtoSpec)  (required)
         * @return operation
         */
        public GetGesuchDokumenteForTypGSOper dokumentTypPath(Object dokumentTyp) {
            reqSpec.addPathParam(DOKUMENT_TYP_PATH, dokumentTyp);
            return this;
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetGesuchDokumenteForTypGSOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchDokumenteForTypGSOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchDokumenteForTypGSOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returniert das GesuchDokument mit der gegebenen Tranche Id und alle Dokumente die dazu gehoeren. Für den SB
     * 
     *
     * @see #dokumentTypPath  (required)
     * @see #gesuchTrancheIdPath  (required)
     * return NullableGesuchDokumentDtoSpec
     */
    public static class GetGesuchDokumenteForTypSBOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchDokument/sb/{gesuchTrancheId}/{dokumentTyp}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchDokumenteForTypSBOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchDokument/sb/{gesuchTrancheId}/{dokumentTyp}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchDokument/sb/{gesuchTrancheId}/{dokumentTyp}
         * @param handler handler
         * @return NullableGesuchDokumentDtoSpec
         */
        public NullableGesuchDokumentDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<NullableGesuchDokumentDtoSpec> type = new TypeRef<NullableGesuchDokumentDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String DOKUMENT_TYP_PATH = "dokumentTyp";

        /**
         * @param dokumentTyp (DokumentTypDtoSpec)  (required)
         * @return operation
         */
        public GetGesuchDokumenteForTypSBOper dokumentTypPath(Object dokumentTyp) {
            reqSpec.addPathParam(DOKUMENT_TYP_PATH, dokumentTyp);
            return this;
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetGesuchDokumenteForTypSBOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchDokumenteForTypSBOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchDokumenteForTypSBOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * return List&lt;UnterschriftenblattDokumentDtoSpec&gt;
     */
    public static class GetUnterschriftenblaetterForGesuchOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/unterschriftenblatt/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetUnterschriftenblaetterForGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /unterschriftenblatt/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /unterschriftenblatt/{gesuchId}
         * @param handler handler
         * @return List&lt;UnterschriftenblattDokumentDtoSpec&gt;
         */
        public List<UnterschriftenblattDokumentDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<UnterschriftenblattDokumentDtoSpec>> type = new TypeRef<List<UnterschriftenblattDokumentDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public GetUnterschriftenblaetterForGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetUnterschriftenblaetterForGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetUnterschriftenblaetterForGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Upload a file for the given customDokumentTyp to the Tranche
     * 
     *
     * @see #customDokumentTypIdPath  (required)
     * @see #fileUploadMultiPart  (required)
     */
    public static class UploadCustomGesuchDokumentOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/customGesuchDokument/{customDokumentTypId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UploadCustomGesuchDokumentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /customGesuchDokument/{customDokumentTypId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String CUSTOM_DOKUMENT_TYP_ID_PATH = "customDokumentTypId";

        /**
         * @param customDokumentTypId (UUID)  (required)
         * @return operation
         */
        public UploadCustomGesuchDokumentOper customDokumentTypIdPath(Object customDokumentTypId) {
            reqSpec.addPathParam(CUSTOM_DOKUMENT_TYP_ID_PATH, customDokumentTypId);
            return this;
        }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param fileUpload (File)  (required)
         * @return operation
         */
         public UploadCustomGesuchDokumentOper fileUploadMultiPart(File fileUpload) {
            reqSpec.addMultiPart(fileUpload);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UploadCustomGesuchDokumentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UploadCustomGesuchDokumentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
