/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.dto;

import java.util.Objects;
import java.util.Arrays;
import ch.dvbern.stip.generated.dto.GesuchTrancheSlimDtoSpec;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GesuchTrancheListDtoSpec
 */
@JsonPropertyOrder({
  GesuchTrancheListDtoSpec.JSON_PROPERTY_TRANCHEN,
  GesuchTrancheListDtoSpec.JSON_PROPERTY_INITIAL_TRANCHE
})
@JsonTypeName("GesuchTrancheList")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GesuchTrancheListDtoSpec {
  public static final String JSON_PROPERTY_TRANCHEN = "tranchen";
  private List<GesuchTrancheSlimDtoSpec> tranchen;

  public static final String JSON_PROPERTY_INITIAL_TRANCHE = "initialTranche";
  private GesuchTrancheSlimDtoSpec initialTranche;

  public GesuchTrancheListDtoSpec() {
  }

  public GesuchTrancheListDtoSpec tranchen(List<GesuchTrancheSlimDtoSpec> tranchen) {
    
    this.tranchen = tranchen;
    return this;
  }

  public GesuchTrancheListDtoSpec addTranchenItem(GesuchTrancheSlimDtoSpec tranchenItem) {
    if (this.tranchen == null) {
      this.tranchen = new ArrayList<>();
    }
    this.tranchen.add(tranchenItem);
    return this;
  }

   /**
   * Get tranchen
   * @return tranchen
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANCHEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GesuchTrancheSlimDtoSpec> getTranchen() {
    return tranchen;
  }


  @JsonProperty(JSON_PROPERTY_TRANCHEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranchen(List<GesuchTrancheSlimDtoSpec> tranchen) {
    this.tranchen = tranchen;
  }


  public GesuchTrancheListDtoSpec initialTranche(GesuchTrancheSlimDtoSpec initialTranche) {
    
    this.initialTranche = initialTranche;
    return this;
  }

   /**
   * Get initialTranche
   * @return initialTranche
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INITIAL_TRANCHE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GesuchTrancheSlimDtoSpec getInitialTranche() {
    return initialTranche;
  }


  @JsonProperty(JSON_PROPERTY_INITIAL_TRANCHE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitialTranche(GesuchTrancheSlimDtoSpec initialTranche) {
    this.initialTranche = initialTranche;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GesuchTrancheListDtoSpec gesuchTrancheList = (GesuchTrancheListDtoSpec) o;
    return Objects.equals(this.tranchen, gesuchTrancheList.tranchen) &&
        Objects.equals(this.initialTranche, gesuchTrancheList.initialTranche);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tranchen, initialTranche);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GesuchTrancheListDtoSpec {\n");
    sb.append("    tranchen: ").append(toIndentedString(tranchen)).append("\n");
    sb.append("    initialTranche: ").append(toIndentedString(initialTranche)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

