/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.CreateAenderungsantragRequestDtoSpec;
import ch.dvbern.stip.generated.dto.CreateGesuchTrancheRequestDtoSpec;
import ch.dvbern.stip.generated.dto.DokumentTypDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchDokumentDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchTrancheDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchTrancheListDtoSpec;
import ch.dvbern.stip.generated.dto.KommentarDtoSpec;
import java.util.UUID;
import ch.dvbern.stip.generated.dto.ValidationReportDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class GesuchTrancheApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private GesuchTrancheApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static GesuchTrancheApiSpec gesuchTranche(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new GesuchTrancheApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                aenderungAblehnen(),
                aenderungAkzeptieren(),
                aenderungEinreichen(),
                aenderungManuellAnpassen(),
                createAenderungsantrag(),
                createGesuchTrancheCopy(),
                deleteAenderung(),
                gesuchTrancheEinreichenValidieren(),
                getAllTranchenForGesuch(),
                getGesuchDokument(),
                getGesuchDokumente(),
                getRequiredGesuchDokumentTyp(),
                validateGesuchTranchePages()
        );
    }

    public AenderungAblehnenOper aenderungAblehnen() {
        return new AenderungAblehnenOper(createReqSpec());
    }

    public AenderungAkzeptierenOper aenderungAkzeptieren() {
        return new AenderungAkzeptierenOper(createReqSpec());
    }

    public AenderungEinreichenOper aenderungEinreichen() {
        return new AenderungEinreichenOper(createReqSpec());
    }

    public AenderungManuellAnpassenOper aenderungManuellAnpassen() {
        return new AenderungManuellAnpassenOper(createReqSpec());
    }

    public CreateAenderungsantragOper createAenderungsantrag() {
        return new CreateAenderungsantragOper(createReqSpec());
    }

    public CreateGesuchTrancheCopyOper createGesuchTrancheCopy() {
        return new CreateGesuchTrancheCopyOper(createReqSpec());
    }

    public DeleteAenderungOper deleteAenderung() {
        return new DeleteAenderungOper(createReqSpec());
    }

    public GesuchTrancheEinreichenValidierenOper gesuchTrancheEinreichenValidieren() {
        return new GesuchTrancheEinreichenValidierenOper(createReqSpec());
    }

    public GetAllTranchenForGesuchOper getAllTranchenForGesuch() {
        return new GetAllTranchenForGesuchOper(createReqSpec());
    }

    public GetGesuchDokumentOper getGesuchDokument() {
        return new GetGesuchDokumentOper(createReqSpec());
    }

    public GetGesuchDokumenteOper getGesuchDokumente() {
        return new GetGesuchDokumenteOper(createReqSpec());
    }

    public GetRequiredGesuchDokumentTypOper getRequiredGesuchDokumentTyp() {
        return new GetRequiredGesuchDokumentTypOper(createReqSpec());
    }

    public ValidateGesuchTranchePagesOper validateGesuchTranchePages() {
        return new ValidateGesuchTranchePagesOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public GesuchTrancheApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * @see #aenderungIdPath Die ID der Aenderung (required)
     * @see #body  (required)
     * return GesuchTrancheDtoSpec
     */
    public static class AenderungAblehnenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuchtranche/{aenderungId}/aenderung/ablehnen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AenderungAblehnenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuchtranche/{aenderungId}/aenderung/ablehnen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuchtranche/{aenderungId}/aenderung/ablehnen
         * @param handler handler
         * @return GesuchTrancheDtoSpec
         */
        public GesuchTrancheDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchTrancheDtoSpec> type = new TypeRef<GesuchTrancheDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param kommentarDtoSpec (KommentarDtoSpec)  (required)
         * @return operation
         */
        public AenderungAblehnenOper body(KommentarDtoSpec kommentarDtoSpec) {
            reqSpec.setBody(kommentarDtoSpec);
            return this;
        }

        public static final String AENDERUNG_ID_PATH = "aenderungId";

        /**
         * @param aenderungId (UUID) Die ID der Aenderung (required)
         * @return operation
         */
        public AenderungAblehnenOper aenderungIdPath(Object aenderungId) {
            reqSpec.addPathParam(AENDERUNG_ID_PATH, aenderungId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public AenderungAblehnenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public AenderungAblehnenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #aenderungIdPath Die ID der Aenderung (required)
     * return GesuchTrancheDtoSpec
     */
    public static class AenderungAkzeptierenOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuchtranche/{aenderungId}/aenderung/akzeptieren";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AenderungAkzeptierenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuchtranche/{aenderungId}/aenderung/akzeptieren
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuchtranche/{aenderungId}/aenderung/akzeptieren
         * @param handler handler
         * @return GesuchTrancheDtoSpec
         */
        public GesuchTrancheDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchTrancheDtoSpec> type = new TypeRef<GesuchTrancheDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String AENDERUNG_ID_PATH = "aenderungId";

        /**
         * @param aenderungId (UUID) Die ID der Aenderung (required)
         * @return operation
         */
        public AenderungAkzeptierenOper aenderungIdPath(Object aenderungId) {
            reqSpec.addPathParam(AENDERUNG_ID_PATH, aenderungId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public AenderungAkzeptierenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public AenderungAkzeptierenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #aenderungIdPath Die ID der Aenderung (required)
     */
    public static class AenderungEinreichenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuchtranche/{aenderungId}/aenderung/einreichen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AenderungEinreichenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuchtranche/{aenderungId}/aenderung/einreichen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String AENDERUNG_ID_PATH = "aenderungId";

        /**
         * @param aenderungId (UUID) Die ID der Aenderung (required)
         * @return operation
         */
        public AenderungEinreichenOper aenderungIdPath(Object aenderungId) {
            reqSpec.addPathParam(AENDERUNG_ID_PATH, aenderungId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public AenderungEinreichenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public AenderungEinreichenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #aenderungIdPath Die ID der Aenderung (required)
     * return GesuchTrancheDtoSpec
     */
    public static class AenderungManuellAnpassenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuchtranche/{aenderungId}/aenderung/manuelleAenderung";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AenderungManuellAnpassenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuchtranche/{aenderungId}/aenderung/manuelleAenderung
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuchtranche/{aenderungId}/aenderung/manuelleAenderung
         * @param handler handler
         * @return GesuchTrancheDtoSpec
         */
        public GesuchTrancheDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchTrancheDtoSpec> type = new TypeRef<GesuchTrancheDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String AENDERUNG_ID_PATH = "aenderungId";

        /**
         * @param aenderungId (UUID) Die ID der Aenderung (required)
         * @return operation
         */
        public AenderungManuellAnpassenOper aenderungIdPath(Object aenderungId) {
            reqSpec.addPathParam(AENDERUNG_ID_PATH, aenderungId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public AenderungManuellAnpassenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public AenderungManuellAnpassenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #body  (required)
     * return GesuchTrancheDtoSpec
     */
    public static class CreateAenderungsantragOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuchtranche/{gesuchId}/aenderungsantrag";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateAenderungsantragOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuchtranche/{gesuchId}/aenderungsantrag
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuchtranche/{gesuchId}/aenderungsantrag
         * @param handler handler
         * @return GesuchTrancheDtoSpec
         */
        public GesuchTrancheDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchTrancheDtoSpec> type = new TypeRef<GesuchTrancheDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param createAenderungsantragRequestDtoSpec (CreateAenderungsantragRequestDtoSpec)  (required)
         * @return operation
         */
        public CreateAenderungsantragOper body(CreateAenderungsantragRequestDtoSpec createAenderungsantragRequestDtoSpec) {
            reqSpec.setBody(createAenderungsantragRequestDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public CreateAenderungsantragOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateAenderungsantragOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateAenderungsantragOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #body  (optional)
     * return GesuchTrancheDtoSpec
     */
    public static class CreateGesuchTrancheCopyOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuchtranche/{gesuchId}/tranche";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateGesuchTrancheCopyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuchtranche/{gesuchId}/tranche
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuchtranche/{gesuchId}/tranche
         * @param handler handler
         * @return GesuchTrancheDtoSpec
         */
        public GesuchTrancheDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchTrancheDtoSpec> type = new TypeRef<GesuchTrancheDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param createGesuchTrancheRequestDtoSpec (CreateGesuchTrancheRequestDtoSpec)  (optional)
         * @return operation
         */
        public CreateGesuchTrancheCopyOper body(CreateGesuchTrancheRequestDtoSpec createGesuchTrancheRequestDtoSpec) {
            reqSpec.setBody(createGesuchTrancheRequestDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public CreateGesuchTrancheCopyOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateGesuchTrancheCopyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateGesuchTrancheCopyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #aenderungIdPath Die ID der Aenderung (required)
     */
    public static class DeleteAenderungOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/gesuchtranche/{aenderungId}/aenderung/delete";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteAenderungOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /gesuchtranche/{aenderungId}/aenderung/delete
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String AENDERUNG_ID_PATH = "aenderungId";

        /**
         * @param aenderungId (UUID) Die ID der Aenderung (required)
         * @return operation
         */
        public DeleteAenderungOper aenderungIdPath(Object aenderungId) {
            reqSpec.addPathParam(AENDERUNG_ID_PATH, aenderungId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteAenderungOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteAenderungOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Das Gesuch Einreichen Validation Report generieren
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return ValidationReportDtoSpec
     */
    public static class GesuchTrancheEinreichenValidierenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchtranche/{gesuchTrancheId}/einreichen/validieren";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchTrancheEinreichenValidierenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchtranche/{gesuchTrancheId}/einreichen/validieren
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchtranche/{gesuchTrancheId}/einreichen/validieren
         * @param handler handler
         * @return ValidationReportDtoSpec
         */
        public ValidationReportDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<ValidationReportDtoSpec> type = new TypeRef<ValidationReportDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GesuchTrancheEinreichenValidierenOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchTrancheEinreichenValidierenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchTrancheEinreichenValidierenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * return GesuchTrancheListDtoSpec
     */
    public static class GetAllTranchenForGesuchOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchtranche/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAllTranchenForGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchtranche/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchtranche/{gesuchId}
         * @param handler handler
         * @return GesuchTrancheListDtoSpec
         */
        public GesuchTrancheListDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchTrancheListDtoSpec> type = new TypeRef<GesuchTrancheListDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetAllTranchenForGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAllTranchenForGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAllTranchenForGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * @see #dokumentTypPath  (required)
     * return GesuchDokumentDtoSpec
     */
    public static class GetGesuchDokumentOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchtranche/{gesuchTrancheId}/dokumente/{dokumentTyp}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchDokumentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchtranche/{gesuchTrancheId}/dokumente/{dokumentTyp}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchtranche/{gesuchTrancheId}/dokumente/{dokumentTyp}
         * @param handler handler
         * @return GesuchDokumentDtoSpec
         */
        public GesuchDokumentDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDokumentDtoSpec> type = new TypeRef<GesuchDokumentDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetGesuchDokumentOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        public static final String DOKUMENT_TYP_PATH = "dokumentTyp";

        /**
         * @param dokumentTyp (DokumentTypDtoSpec)  (required)
         * @return operation
         */
        public GetGesuchDokumentOper dokumentTypPath(Object dokumentTyp) {
            reqSpec.addPathParam(DOKUMENT_TYP_PATH, dokumentTyp);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchDokumentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchDokumentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return List&lt;GesuchDokumentDtoSpec&gt;
     */
    public static class GetGesuchDokumenteOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchtranche/{gesuchTrancheId}/dokumente";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchDokumenteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchtranche/{gesuchTrancheId}/dokumente
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchtranche/{gesuchTrancheId}/dokumente
         * @param handler handler
         * @return List&lt;GesuchDokumentDtoSpec&gt;
         */
        public List<GesuchDokumentDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchDokumentDtoSpec>> type = new TypeRef<List<GesuchDokumentDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetGesuchDokumenteOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchDokumenteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchDokumenteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return List&lt;DokumentTypDtoSpec&gt;
     */
    public static class GetRequiredGesuchDokumentTypOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchtranche/{gesuchTrancheId}/requiredDokumente";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRequiredGesuchDokumentTypOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchtranche/{gesuchTrancheId}/requiredDokumente
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchtranche/{gesuchTrancheId}/requiredDokumente
         * @param handler handler
         * @return List&lt;DokumentTypDtoSpec&gt;
         */
        public List<DokumentTypDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<DokumentTypDtoSpec>> type = new TypeRef<List<DokumentTypDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetRequiredGesuchDokumentTypOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRequiredGesuchDokumentTypOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRequiredGesuchDokumentTypOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return ValidationReportDtoSpec
     */
    public static class ValidateGesuchTranchePagesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchtranche/validatePages/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ValidateGesuchTranchePagesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchtranche/validatePages/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchtranche/validatePages/{gesuchTrancheId}
         * @param handler handler
         * @return ValidationReportDtoSpec
         */
        public ValidationReportDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<ValidationReportDtoSpec> type = new TypeRef<ValidationReportDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public ValidateGesuchTranchePagesOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ValidateGesuchTranchePagesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ValidateGesuchTranchePagesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
