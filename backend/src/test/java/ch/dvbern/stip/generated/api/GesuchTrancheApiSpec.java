/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.CreateAenderungsantragRequestDtoSpec;
import ch.dvbern.stip.generated.dto.CreateGesuchTrancheRequestDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchDtoSpec;
import java.util.UUID;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class GesuchTrancheApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private GesuchTrancheApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static GesuchTrancheApiSpec gesuchTranche(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new GesuchTrancheApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createAenderungsantrag(),
                createGesuchTrancheCopy(),
                getAenderungsantrag()
        );
    }

    public CreateAenderungsantragOper createAenderungsantrag() {
        return new CreateAenderungsantragOper(createReqSpec());
    }

    public CreateGesuchTrancheCopyOper createGesuchTrancheCopy() {
        return new CreateGesuchTrancheCopyOper(createReqSpec());
    }

    public GetAenderungsantragOper getAenderungsantrag() {
        return new GetAenderungsantragOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public GesuchTrancheApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #body  (required)
     * return GesuchDtoSpec
     */
    public static class CreateAenderungsantragOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuchtranche/{gesuchId}/aenderungsantrag";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateAenderungsantragOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuchtranche/{gesuchId}/aenderungsantrag
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuchtranche/{gesuchId}/aenderungsantrag
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param createAenderungsantragRequestDtoSpec (CreateAenderungsantragRequestDtoSpec)  (required)
         * @return operation
         */
        public CreateAenderungsantragOper body(CreateAenderungsantragRequestDtoSpec createAenderungsantragRequestDtoSpec) {
            reqSpec.setBody(createAenderungsantragRequestDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public CreateAenderungsantragOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateAenderungsantragOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateAenderungsantragOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #trancheIdPath  (required)
     * @see #body  (optional)
     * return GesuchDtoSpec
     */
    public static class CreateGesuchTrancheCopyOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuchtranche/{gesuchId}/tranche/{trancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateGesuchTrancheCopyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuchtranche/{gesuchId}/tranche/{trancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuchtranche/{gesuchId}/tranche/{trancheId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param createGesuchTrancheRequestDtoSpec (CreateGesuchTrancheRequestDtoSpec)  (optional)
         * @return operation
         */
        public CreateGesuchTrancheCopyOper body(CreateGesuchTrancheRequestDtoSpec createGesuchTrancheRequestDtoSpec) {
            reqSpec.setBody(createGesuchTrancheRequestDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public CreateGesuchTrancheCopyOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        public static final String TRANCHE_ID_PATH = "trancheId";

        /**
         * @param trancheId (UUID)  (required)
         * @return operation
         */
        public CreateGesuchTrancheCopyOper trancheIdPath(Object trancheId) {
            reqSpec.addPathParam(TRANCHE_ID_PATH, trancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateGesuchTrancheCopyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateGesuchTrancheCopyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * return List&lt;GesuchDtoSpec&gt;
     */
    public static class GetAenderungsantragOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchtranche/{gesuchId}/aenderungsantrag";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAenderungsantragOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchtranche/{gesuchId}/aenderungsantrag
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchtranche/{gesuchId}/aenderungsantrag
         * @param handler handler
         * @return List&lt;GesuchDtoSpec&gt;
         */
        public List<GesuchDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchDtoSpec>> type = new TypeRef<List<GesuchDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetAenderungsantragOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAenderungsantragOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAenderungsantragOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
