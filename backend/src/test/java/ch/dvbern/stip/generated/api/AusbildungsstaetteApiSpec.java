/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.AusbildungsstaetteCreateDtoSpec;
import ch.dvbern.stip.generated.dto.AusbildungsstaetteDtoSpec;
import ch.dvbern.stip.generated.dto.AusbildungsstaetteUpdateDtoSpec;
import java.util.UUID;
import ch.dvbern.stip.generated.dto.ValidationReportDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class AusbildungsstaetteApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private AusbildungsstaetteApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static AusbildungsstaetteApiSpec ausbildungsstaette(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new AusbildungsstaetteApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createAusbildungsstaette(),
                deleteAusbildungsstaette(),
                getAusbildungsstaette(),
                getAusbildungsstaetten(),
                updateAusbildungsstaette()
        );
    }

    public CreateAusbildungsstaetteOper createAusbildungsstaette() {
        return new CreateAusbildungsstaetteOper(createReqSpec());
    }

    public DeleteAusbildungsstaetteOper deleteAusbildungsstaette() {
        return new DeleteAusbildungsstaetteOper(createReqSpec());
    }

    public GetAusbildungsstaetteOper getAusbildungsstaette() {
        return new GetAusbildungsstaetteOper(createReqSpec());
    }

    public GetAusbildungsstaettenOper getAusbildungsstaetten() {
        return new GetAusbildungsstaettenOper(createReqSpec());
    }

    public UpdateAusbildungsstaetteOper updateAusbildungsstaette() {
        return new UpdateAusbildungsstaetteOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public AusbildungsstaetteApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * @see #body  (optional)
     */
    public static class CreateAusbildungsstaetteOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/ausbildungsstaette";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateAusbildungsstaetteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /ausbildungsstaette
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param ausbildungsstaetteCreateDtoSpec (AusbildungsstaetteCreateDtoSpec)  (optional)
         * @return operation
         */
        public CreateAusbildungsstaetteOper body(AusbildungsstaetteCreateDtoSpec ausbildungsstaetteCreateDtoSpec) {
            reqSpec.setBody(ausbildungsstaetteCreateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateAusbildungsstaetteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateAusbildungsstaetteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete Ausbildungsstaette
     * 
     *
     * @see #ausbildungsstaetteIdPath  (required)
     */
    public static class DeleteAusbildungsstaetteOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/ausbildungsstaette/{ausbildungsstaetteId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteAusbildungsstaetteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /ausbildungsstaette/{ausbildungsstaetteId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String AUSBILDUNGSSTAETTE_ID_PATH = "ausbildungsstaetteId";

        /**
         * @param ausbildungsstaetteId (UUID)  (required)
         * @return operation
         */
        public DeleteAusbildungsstaetteOper ausbildungsstaetteIdPath(Object ausbildungsstaetteId) {
            reqSpec.addPathParam(AUSBILDUNGSSTAETTE_ID_PATH, ausbildungsstaetteId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteAusbildungsstaetteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteAusbildungsstaetteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * returns a Ausbildungsstaette with the given id
     * 
     *
     * @see #ausbildungsstaetteIdPath  (required)
     * return AusbildungsstaetteDtoSpec
     */
    public static class GetAusbildungsstaetteOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/ausbildungsstaette/{ausbildungsstaetteId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAusbildungsstaetteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /ausbildungsstaette/{ausbildungsstaetteId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /ausbildungsstaette/{ausbildungsstaetteId}
         * @param handler handler
         * @return AusbildungsstaetteDtoSpec
         */
        public AusbildungsstaetteDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<AusbildungsstaetteDtoSpec> type = new TypeRef<AusbildungsstaetteDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String AUSBILDUNGSSTAETTE_ID_PATH = "ausbildungsstaetteId";

        /**
         * @param ausbildungsstaetteId (UUID)  (required)
         * @return operation
         */
        public GetAusbildungsstaetteOper ausbildungsstaetteIdPath(Object ausbildungsstaetteId) {
            reqSpec.addPathParam(AUSBILDUNGSSTAETTE_ID_PATH, ausbildungsstaetteId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAusbildungsstaetteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAusbildungsstaetteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returniert alle Ausbildungsstaette zur Verfuegung.
     * 
     *
     * return List&lt;AusbildungsstaetteDtoSpec&gt;
     */
    public static class GetAusbildungsstaettenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/ausbildungsstaette";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAusbildungsstaettenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /ausbildungsstaette
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /ausbildungsstaette
         * @param handler handler
         * @return List&lt;AusbildungsstaetteDtoSpec&gt;
         */
        public List<AusbildungsstaetteDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<AusbildungsstaetteDtoSpec>> type = new TypeRef<List<AusbildungsstaetteDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAusbildungsstaettenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAusbildungsstaettenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #ausbildungsstaetteIdPath  (required)
     * @see #body  (optional)
     */
    public static class UpdateAusbildungsstaetteOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/ausbildungsstaette/{ausbildungsstaetteId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateAusbildungsstaetteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /ausbildungsstaette/{ausbildungsstaetteId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param ausbildungsstaetteUpdateDtoSpec (AusbildungsstaetteUpdateDtoSpec)  (optional)
         * @return operation
         */
        public UpdateAusbildungsstaetteOper body(AusbildungsstaetteUpdateDtoSpec ausbildungsstaetteUpdateDtoSpec) {
            reqSpec.setBody(ausbildungsstaetteUpdateDtoSpec);
            return this;
        }

        public static final String AUSBILDUNGSSTAETTE_ID_PATH = "ausbildungsstaetteId";

        /**
         * @param ausbildungsstaetteId (UUID)  (required)
         * @return operation
         */
        public UpdateAusbildungsstaetteOper ausbildungsstaetteIdPath(Object ausbildungsstaetteId) {
            reqSpec.addPathParam(AUSBILDUNGSSTAETTE_ID_PATH, ausbildungsstaetteId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateAusbildungsstaetteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateAusbildungsstaetteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
