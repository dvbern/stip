/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.DruckauftraegeColumnDtoSpec;
import ch.dvbern.stip.generated.dto.DruckauftragStatusDtoSpec;
import ch.dvbern.stip.generated.dto.DruckauftragTypDtoSpec;
import ch.dvbern.stip.generated.dto.GetDruckauftraegeQueryTypeDtoSpec;
import java.time.LocalDate;
import ch.dvbern.stip.generated.dto.PaginatedDruckauftraegeDtoSpec;
import ch.dvbern.stip.generated.dto.SortOrderDtoSpec;
import ch.dvbern.stip.generated.dto.ValidationReportDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class DruckenApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private DruckenApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static DruckenApiSpec drucken(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new DruckenApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                getAllDruckauftraege()
        );
    }

    public GetAllDruckauftraegeOper getAllDruckauftraege() {
        return new GetAllDruckauftraegeOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public DruckenApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Get all Druckauftraege
     * 
     *
     * @see #getDruckauftraegeQueryTypePath  (required)
     * @see #druckauftragTypQuery  (required)
     * @see #batchNameQuery  (optional)
     * @see #bearbeiterQuery  (optional)
     * @see #timestampErstelltQuery  (optional)
     * @see #druckauftragStatusQuery  (optional)
     * @see #sortColumnQuery  (optional)
     * @see #sortOrderQuery  (optional)
     * return PaginatedDruckauftraegeDtoSpec
     */
    public static class GetAllDruckauftraegeOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/drucken/{getDruckauftraegeQueryType}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAllDruckauftraegeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /drucken/{getDruckauftraegeQueryType}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /drucken/{getDruckauftraegeQueryType}
         * @param handler handler
         * @return PaginatedDruckauftraegeDtoSpec
         */
        public PaginatedDruckauftraegeDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<PaginatedDruckauftraegeDtoSpec> type = new TypeRef<PaginatedDruckauftraegeDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GET_DRUCKAUFTRAEGE_QUERY_TYPE_PATH = "getDruckauftraegeQueryType";

        /**
         * @param getDruckauftraegeQueryType (GetDruckauftraegeQueryTypeDtoSpec)  (required)
         * @return operation
         */
        public GetAllDruckauftraegeOper getDruckauftraegeQueryTypePath(Object getDruckauftraegeQueryType) {
            reqSpec.addPathParam(GET_DRUCKAUFTRAEGE_QUERY_TYPE_PATH, getDruckauftraegeQueryType);
            return this;
        }

        public static final String BATCH_NAME_QUERY = "batchName";

        /**
         * @param batchName (String)  (optional)
         * @return operation
         */
        public GetAllDruckauftraegeOper batchNameQuery(Object... batchName) {
            reqSpec.addQueryParam(BATCH_NAME_QUERY, batchName);
            return this;
        }

        public static final String BEARBEITER_QUERY = "bearbeiter";

        /**
         * @param bearbeiter (String)  (optional)
         * @return operation
         */
        public GetAllDruckauftraegeOper bearbeiterQuery(Object... bearbeiter) {
            reqSpec.addQueryParam(BEARBEITER_QUERY, bearbeiter);
            return this;
        }

        public static final String TIMESTAMP_ERSTELLT_QUERY = "timestampErstellt";

        /**
         * @param timestampErstellt (LocalDate)  (optional)
         * @return operation
         */
        public GetAllDruckauftraegeOper timestampErstelltQuery(Object... timestampErstellt) {
            reqSpec.addQueryParam(TIMESTAMP_ERSTELLT_QUERY, timestampErstellt);
            return this;
        }

        public static final String DRUCKAUFTRAG_STATUS_QUERY = "druckauftragStatus";

        /**
         * @param druckauftragStatus (DruckauftragStatusDtoSpec)  (optional)
         * @return operation
         */
        public GetAllDruckauftraegeOper druckauftragStatusQuery(Object... druckauftragStatus) {
            reqSpec.addQueryParam(DRUCKAUFTRAG_STATUS_QUERY, druckauftragStatus);
            return this;
        }

        public static final String DRUCKAUFTRAG_TYP_QUERY = "druckauftragTyp";

        /**
         * @param druckauftragTyp (DruckauftragTypDtoSpec)  (required)
         * @return operation
         */
        public GetAllDruckauftraegeOper druckauftragTypQuery(Object... druckauftragTyp) {
            reqSpec.addQueryParam(DRUCKAUFTRAG_TYP_QUERY, druckauftragTyp);
            return this;
        }

        public static final String SORT_COLUMN_QUERY = "sortColumn";

        /**
         * @param sortColumn (DruckauftraegeColumnDtoSpec)  (optional)
         * @return operation
         */
        public GetAllDruckauftraegeOper sortColumnQuery(Object... sortColumn) {
            reqSpec.addQueryParam(SORT_COLUMN_QUERY, sortColumn);
            return this;
        }

        public static final String SORT_ORDER_QUERY = "sortOrder";

        /**
         * @param sortOrder (SortOrderDtoSpec)  (optional)
         * @return operation
         */
        public GetAllDruckauftraegeOper sortOrderQuery(Object... sortOrder) {
            reqSpec.addQueryParam(SORT_ORDER_QUERY, sortOrder);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAllDruckauftraegeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAllDruckauftraegeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
