/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GsDashboardMissingDocumentsDtoSpec
 */
@JsonPropertyOrder({
  GsDashboardMissingDocumentsDtoSpec.JSON_PROPERTY_TRANCHE_ID,
  GsDashboardMissingDocumentsDtoSpec.JSON_PROPERTY_COUNT
})
@JsonTypeName("GsDashboard_missingDocuments")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GsDashboardMissingDocumentsDtoSpec {
  public static final String JSON_PROPERTY_TRANCHE_ID = "trancheId";
  private UUID trancheId;

  public static final String JSON_PROPERTY_COUNT = "count";
  private Integer count;

  public GsDashboardMissingDocumentsDtoSpec() {
  }

  public GsDashboardMissingDocumentsDtoSpec trancheId(UUID trancheId) {
    
    this.trancheId = trancheId;
    return this;
  }

   /**
   * Get trancheId
   * @return trancheId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANCHE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getTrancheId() {
    return trancheId;
  }


  @JsonProperty(JSON_PROPERTY_TRANCHE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrancheId(UUID trancheId) {
    this.trancheId = trancheId;
  }


  public GsDashboardMissingDocumentsDtoSpec count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCount(Integer count) {
    this.count = count;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GsDashboardMissingDocumentsDtoSpec gsDashboardMissingDocuments = (GsDashboardMissingDocumentsDtoSpec) o;
    return Objects.equals(this.trancheId, gsDashboardMissingDocuments.trancheId) &&
        Objects.equals(this.count, gsDashboardMissingDocuments.count);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trancheId, count);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GsDashboardMissingDocumentsDtoSpec {\n");
    sb.append("    trancheId: ").append(toIndentedString(trancheId)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

