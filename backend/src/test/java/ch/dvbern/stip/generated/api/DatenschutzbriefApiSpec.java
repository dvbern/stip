/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import java.io.File;
import ch.dvbern.stip.generated.dto.FileDownloadTokenDtoSpec;
import java.util.UUID;
import ch.dvbern.stip.generated.dto.ValidationReportDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class DatenschutzbriefApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private DatenschutzbriefApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static DatenschutzbriefApiSpec datenschutzbrief(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new DatenschutzbriefApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                getDatenschutzbrief(),
                getDatenschutzbriefDownloadToken()
        );
    }

    public GetDatenschutzbriefOper getDatenschutzbrief() {
        return new GetDatenschutzbriefOper(createReqSpec());
    }

    public GetDatenschutzbriefDownloadTokenOper getDatenschutzbriefDownloadToken() {
        return new GetDatenschutzbriefDownloadTokenOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public DatenschutzbriefApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * get Datenschutzbrief
     * 
     *
     * @see #tokenQuery  (required)
     * @see #trancheIdPath  (optional)
     * return File
     */
    public static class GetDatenschutzbriefOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/datenschutzbrief/{trancheId}/download";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDatenschutzbriefOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/octet-stream");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /datenschutzbrief/{trancheId}/download
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /datenschutzbrief/{trancheId}/download
         * @param handler handler
         * @return File
         */
        public File executeAs(Function<Response, Response> handler) {
            TypeRef<File> type = new TypeRef<File>(){};
            return execute(handler).as(type);
        }

        public static final String TRANCHE_ID_PATH = "trancheId";

        /**
         * @param trancheId (UUID)  (optional)
         * @return operation
         */
        public GetDatenschutzbriefOper trancheIdPath(Object trancheId) {
            reqSpec.addPathParam(TRANCHE_ID_PATH, trancheId);
            return this;
        }

        public static final String TOKEN_QUERY = "token";

        /**
         * @param token (String)  (required)
         * @return operation
         */
        public GetDatenschutzbriefOper tokenQuery(Object... token) {
            reqSpec.addQueryParam(TOKEN_QUERY, token);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDatenschutzbriefOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDatenschutzbriefOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * get Token to downlaod Verfuegung
     * 
     *
     * @see #elternIdPath  (required)
     * return FileDownloadTokenDtoSpec
     */
    public static class GetDatenschutzbriefDownloadTokenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/datenschutzbrief/{elternId}/token";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDatenschutzbriefDownloadTokenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /datenschutzbrief/{elternId}/token
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /datenschutzbrief/{elternId}/token
         * @param handler handler
         * @return FileDownloadTokenDtoSpec
         */
        public FileDownloadTokenDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<FileDownloadTokenDtoSpec> type = new TypeRef<FileDownloadTokenDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String ELTERN_ID_PATH = "elternId";

        /**
         * @param elternId (UUID)  (required)
         * @return operation
         */
        public GetDatenschutzbriefDownloadTokenOper elternIdPath(Object elternId) {
            reqSpec.addPathParam(ELTERN_ID_PATH, elternId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDatenschutzbriefDownloadTokenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDatenschutzbriefDownloadTokenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
