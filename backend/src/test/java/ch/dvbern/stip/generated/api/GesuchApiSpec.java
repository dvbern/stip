/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.AusgewaehlterGrundDtoSpec;
import ch.dvbern.stip.generated.dto.BerechnungsresultatDtoSpec;
import ch.dvbern.stip.generated.dto.BeschwerdeVerlaufEntryCreateDtoSpec;
import ch.dvbern.stip.generated.dto.BeschwerdeVerlaufEntryDtoSpec;
import ch.dvbern.stip.generated.dto.EinreichedatumAendernRequestDtoSpec;
import ch.dvbern.stip.generated.dto.EinreichedatumStatusDtoSpec;
import ch.dvbern.stip.generated.dto.FallDashboardItemDtoSpec;
import java.io.File;
import ch.dvbern.stip.generated.dto.FileDownloadTokenDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchCreateDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchCreateResponseDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchInfoDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchTrancheTypDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchUpdateDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchWithChangesDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchZurueckweisenResponseDtoSpec;
import ch.dvbern.stip.generated.dto.GetGesucheSBQueryTypeDtoSpec;
import ch.dvbern.stip.generated.dto.KommentarDtoSpec;
import java.time.LocalDate;
import ch.dvbern.stip.generated.dto.NachfristAendernRequestDtoSpec;
import ch.dvbern.stip.generated.dto.PaginatedSbDashboardDtoSpec;
import ch.dvbern.stip.generated.dto.SbDashboardColumnDtoSpec;
import ch.dvbern.stip.generated.dto.SortOrderDtoSpec;
import ch.dvbern.stip.generated.dto.StatusprotokollEntryDtoSpec;
import java.util.UUID;
import ch.dvbern.stip.generated.dto.ValidationReportDtoSpec;
import ch.dvbern.stip.generated.dto.VerfuegungDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class GesuchApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private GesuchApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static GesuchApiSpec gesuch(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new GesuchApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                bearbeitungAbschliessen(),
                canEinreichedatumAendern(),
                changeGesuchStatusToBereitFuerBearbeitung(),
                changeGesuchStatusToDatenschutzbriefAmGenerieren(),
                changeGesuchStatusToInBearbeitung(),
                changeGesuchStatusToNegativeVerfuegung(),
                changeGesuchStatusToVerfuegt(),
                changeGesuchStatusToVerfuegungAmGenerieren(),
                changeGesuchStatusToVersandbereit(),
                changeGesuchStatusToVersendet(),
                createBeschwerdeEntscheid(),
                createBeschwerdeVerlaufEntry(),
                createGesuch(),
                createManuelleVerfuegung(),
                deleteGesuch(),
                einreichedatumManuellAendern(),
                gesuchEinreichenGs(),
                gesuchFehlendeDokumenteUebermitteln(),
                gesuchManuellPruefenJur(),
                gesuchManuellPruefenSB(),
                gesuchTrancheFehlendeDokumenteEinreichen(),
                gesuchZurueckweisen(),
                getAllBeschwerdeVerlaufEntrys(),
                getAllVerfuegungen(),
                getBerechnungForGesuch(),
                getBerechnungsBlattForGesuch(),
                getBerechnungsblattDownloadToken(),
                getGesuchGS(),
                getGesuchInfo(),
                getGesuchSB(),
                getGesucheGs(),
                getGesucheSb(),
                getGsAenderungChangesInBearbeitung(),
                getGsDashboard(),
                getInitialTrancheChanges(),
                getSbAenderungChanges(),
                getSozialdienstMitarbeiterDashboard(),
                getStatusProtokoll(),
                setGesuchsperiodeForGesuch(),
                updateGesuch(),
                updateNachfristDokumente()
        );
    }

    public BearbeitungAbschliessenOper bearbeitungAbschliessen() {
        return new BearbeitungAbschliessenOper(createReqSpec());
    }

    public CanEinreichedatumAendernOper canEinreichedatumAendern() {
        return new CanEinreichedatumAendernOper(createReqSpec());
    }

    public ChangeGesuchStatusToBereitFuerBearbeitungOper changeGesuchStatusToBereitFuerBearbeitung() {
        return new ChangeGesuchStatusToBereitFuerBearbeitungOper(createReqSpec());
    }

    public ChangeGesuchStatusToDatenschutzbriefAmGenerierenOper changeGesuchStatusToDatenschutzbriefAmGenerieren() {
        return new ChangeGesuchStatusToDatenschutzbriefAmGenerierenOper(createReqSpec());
    }

    public ChangeGesuchStatusToInBearbeitungOper changeGesuchStatusToInBearbeitung() {
        return new ChangeGesuchStatusToInBearbeitungOper(createReqSpec());
    }

    public ChangeGesuchStatusToNegativeVerfuegungOper changeGesuchStatusToNegativeVerfuegung() {
        return new ChangeGesuchStatusToNegativeVerfuegungOper(createReqSpec());
    }

    public ChangeGesuchStatusToVerfuegtOper changeGesuchStatusToVerfuegt() {
        return new ChangeGesuchStatusToVerfuegtOper(createReqSpec());
    }

    public ChangeGesuchStatusToVerfuegungAmGenerierenOper changeGesuchStatusToVerfuegungAmGenerieren() {
        return new ChangeGesuchStatusToVerfuegungAmGenerierenOper(createReqSpec());
    }

    public ChangeGesuchStatusToVersandbereitOper changeGesuchStatusToVersandbereit() {
        return new ChangeGesuchStatusToVersandbereitOper(createReqSpec());
    }

    public ChangeGesuchStatusToVersendetOper changeGesuchStatusToVersendet() {
        return new ChangeGesuchStatusToVersendetOper(createReqSpec());
    }

    public CreateBeschwerdeEntscheidOper createBeschwerdeEntscheid() {
        return new CreateBeschwerdeEntscheidOper(createReqSpec());
    }

    public CreateBeschwerdeVerlaufEntryOper createBeschwerdeVerlaufEntry() {
        return new CreateBeschwerdeVerlaufEntryOper(createReqSpec());
    }

    public CreateGesuchOper createGesuch() {
        return new CreateGesuchOper(createReqSpec());
    }

    public CreateManuelleVerfuegungOper createManuelleVerfuegung() {
        return new CreateManuelleVerfuegungOper(createReqSpec());
    }

    public DeleteGesuchOper deleteGesuch() {
        return new DeleteGesuchOper(createReqSpec());
    }

    public EinreichedatumManuellAendernOper einreichedatumManuellAendern() {
        return new EinreichedatumManuellAendernOper(createReqSpec());
    }

    public GesuchEinreichenGsOper gesuchEinreichenGs() {
        return new GesuchEinreichenGsOper(createReqSpec());
    }

    public GesuchFehlendeDokumenteUebermittelnOper gesuchFehlendeDokumenteUebermitteln() {
        return new GesuchFehlendeDokumenteUebermittelnOper(createReqSpec());
    }

    public GesuchManuellPruefenJurOper gesuchManuellPruefenJur() {
        return new GesuchManuellPruefenJurOper(createReqSpec());
    }

    public GesuchManuellPruefenSBOper gesuchManuellPruefenSB() {
        return new GesuchManuellPruefenSBOper(createReqSpec());
    }

    public GesuchTrancheFehlendeDokumenteEinreichenOper gesuchTrancheFehlendeDokumenteEinreichen() {
        return new GesuchTrancheFehlendeDokumenteEinreichenOper(createReqSpec());
    }

    public GesuchZurueckweisenOper gesuchZurueckweisen() {
        return new GesuchZurueckweisenOper(createReqSpec());
    }

    public GetAllBeschwerdeVerlaufEntrysOper getAllBeschwerdeVerlaufEntrys() {
        return new GetAllBeschwerdeVerlaufEntrysOper(createReqSpec());
    }

    public GetAllVerfuegungenOper getAllVerfuegungen() {
        return new GetAllVerfuegungenOper(createReqSpec());
    }

    public GetBerechnungForGesuchOper getBerechnungForGesuch() {
        return new GetBerechnungForGesuchOper(createReqSpec());
    }

    public GetBerechnungsBlattForGesuchOper getBerechnungsBlattForGesuch() {
        return new GetBerechnungsBlattForGesuchOper(createReqSpec());
    }

    public GetBerechnungsblattDownloadTokenOper getBerechnungsblattDownloadToken() {
        return new GetBerechnungsblattDownloadTokenOper(createReqSpec());
    }

    public GetGesuchGSOper getGesuchGS() {
        return new GetGesuchGSOper(createReqSpec());
    }

    public GetGesuchInfoOper getGesuchInfo() {
        return new GetGesuchInfoOper(createReqSpec());
    }

    public GetGesuchSBOper getGesuchSB() {
        return new GetGesuchSBOper(createReqSpec());
    }

    public GetGesucheGsOper getGesucheGs() {
        return new GetGesucheGsOper(createReqSpec());
    }

    public GetGesucheSbOper getGesucheSb() {
        return new GetGesucheSbOper(createReqSpec());
    }

    public GetGsAenderungChangesInBearbeitungOper getGsAenderungChangesInBearbeitung() {
        return new GetGsAenderungChangesInBearbeitungOper(createReqSpec());
    }

    public GetGsDashboardOper getGsDashboard() {
        return new GetGsDashboardOper(createReqSpec());
    }

    public GetInitialTrancheChangesOper getInitialTrancheChanges() {
        return new GetInitialTrancheChangesOper(createReqSpec());
    }

    public GetSbAenderungChangesOper getSbAenderungChanges() {
        return new GetSbAenderungChangesOper(createReqSpec());
    }

    public GetSozialdienstMitarbeiterDashboardOper getSozialdienstMitarbeiterDashboard() {
        return new GetSozialdienstMitarbeiterDashboardOper(createReqSpec());
    }

    public GetStatusProtokollOper getStatusProtokoll() {
        return new GetStatusProtokollOper(createReqSpec());
    }

    public SetGesuchsperiodeForGesuchOper setGesuchsperiodeForGesuch() {
        return new SetGesuchsperiodeForGesuchOper(createReqSpec());
    }

    public UpdateGesuchOper updateGesuch() {
        return new UpdateGesuchOper(createReqSpec());
    }

    public UpdateNachfristDokumenteOper updateNachfristDokumente() {
        return new UpdateNachfristDokumenteOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public GesuchApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Die Bearbeitung des Gesuch durch den SB abschliessen
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class BearbeitungAbschliessenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/bearbeitungAbschliessen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public BearbeitungAbschliessenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/bearbeitungAbschliessen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/bearbeitungAbschliessen
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public BearbeitungAbschliessenOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public BearbeitungAbschliessenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public BearbeitungAbschliessenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * return EinreichedatumStatusDtoSpec
     */
    public static class CanEinreichedatumAendernOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/einreichedatum";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CanEinreichedatumAendernOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/einreichedatum
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/einreichedatum
         * @param handler handler
         * @return EinreichedatumStatusDtoSpec
         */
        public EinreichedatumStatusDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<EinreichedatumStatusDtoSpec> type = new TypeRef<EinreichedatumStatusDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public CanEinreichedatumAendernOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CanEinreichedatumAendernOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CanEinreichedatumAendernOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * @see #body  (optional)
     * return GesuchWithChangesDtoSpec
     */
    public static class ChangeGesuchStatusToBereitFuerBearbeitungOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/bereit-fuer-bearbeitung/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToBereitFuerBearbeitungOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/bereit-fuer-bearbeitung/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/bereit-fuer-bearbeitung/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param kommentarDtoSpec (KommentarDtoSpec)  (optional)
         * @return operation
         */
        public ChangeGesuchStatusToBereitFuerBearbeitungOper body(KommentarDtoSpec kommentarDtoSpec) {
            reqSpec.setBody(kommentarDtoSpec);
            return this;
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToBereitFuerBearbeitungOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToBereitFuerBearbeitungOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToBereitFuerBearbeitungOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class ChangeGesuchStatusToDatenschutzbriefAmGenerierenOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/datenschutzbrief-generieren/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToDatenschutzbriefAmGenerierenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/datenschutzbrief-generieren/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/datenschutzbrief-generieren/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToDatenschutzbriefAmGenerierenOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToDatenschutzbriefAmGenerierenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToDatenschutzbriefAmGenerierenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class ChangeGesuchStatusToInBearbeitungOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/in-bearbeitung/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToInBearbeitungOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/in-bearbeitung/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/in-bearbeitung/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToInBearbeitungOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToInBearbeitungOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToInBearbeitungOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * @see #body  (required)
     * return GesuchDtoSpec
     */
    public static class ChangeGesuchStatusToNegativeVerfuegungOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/negative-verfuegung/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToNegativeVerfuegungOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/negative-verfuegung/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/negative-verfuegung/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param ausgewaehlterGrundDtoSpec (AusgewaehlterGrundDtoSpec)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToNegativeVerfuegungOper body(AusgewaehlterGrundDtoSpec ausgewaehlterGrundDtoSpec) {
            reqSpec.setBody(ausgewaehlterGrundDtoSpec);
            return this;
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToNegativeVerfuegungOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToNegativeVerfuegungOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToNegativeVerfuegungOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class ChangeGesuchStatusToVerfuegtOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/verfuegt/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToVerfuegtOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/verfuegt/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/verfuegt/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToVerfuegtOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVerfuegtOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVerfuegtOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class ChangeGesuchStatusToVerfuegungAmGenerierenOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/verfuegung-generieren/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToVerfuegungAmGenerierenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/verfuegung-generieren/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/verfuegung-generieren/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToVerfuegungAmGenerierenOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVerfuegungAmGenerierenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVerfuegungAmGenerierenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath Die ID von der GesuchTranche (required)
     * return GesuchDtoSpec
     */
    public static class ChangeGesuchStatusToVersandbereitOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/unterschriftenblatt-erhalten/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToVersandbereitOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/unterschriftenblatt-erhalten/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/unterschriftenblatt-erhalten/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID) Die ID von der GesuchTranche (required)
         * @return operation
         */
        public ChangeGesuchStatusToVersandbereitOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVersandbereitOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVersandbereitOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class ChangeGesuchStatusToVersendetOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/versendet/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToVersendetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/versendet/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/versendet/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToVersendetOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVersendetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVersendetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * @see #kommentarForm  (required)
     * @see #beschwerdeErfolgreichForm  (required)
     * @see #fileUploadMultiPart  (required)
     */
    public static class CreateBeschwerdeEntscheidOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/{gesuchId}/beschwerde-entscheid";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateBeschwerdeEntscheidOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/{gesuchId}/beschwerde-entscheid
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public CreateBeschwerdeEntscheidOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

         public static final String KOMMENTAR_FORM = "kommentar";

         /**
         * @param kommentar (String)  (required)
         * @return operation
         */
         public CreateBeschwerdeEntscheidOper kommentarForm(Object... kommentar) {
            reqSpec.addFormParam(KOMMENTAR_FORM, kommentar);
            return this;
         }

         public static final String BESCHWERDE_ERFOLGREICH_FORM = "beschwerdeErfolgreich";

         /**
         * @param beschwerdeErfolgreich (Boolean)  (required)
         * @return operation
         */
         public CreateBeschwerdeEntscheidOper beschwerdeErfolgreichForm(Object... beschwerdeErfolgreich) {
            reqSpec.addFormParam(BESCHWERDE_ERFOLGREICH_FORM, beschwerdeErfolgreich);
            return this;
         }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param fileUpload (File)  (required)
         * @return operation
         */
         public CreateBeschwerdeEntscheidOper fileUploadMultiPart(File fileUpload) {
            reqSpec.addMultiPart(fileUpload);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateBeschwerdeEntscheidOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateBeschwerdeEntscheidOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * @see #body  (optional)
     * return BeschwerdeVerlaufEntryDtoSpec
     */
    public static class CreateBeschwerdeVerlaufEntryOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/{gesuchId}/beschwerde";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateBeschwerdeVerlaufEntryOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/{gesuchId}/beschwerde
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/{gesuchId}/beschwerde
         * @param handler handler
         * @return BeschwerdeVerlaufEntryDtoSpec
         */
        public BeschwerdeVerlaufEntryDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<BeschwerdeVerlaufEntryDtoSpec> type = new TypeRef<BeschwerdeVerlaufEntryDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param beschwerdeVerlaufEntryCreateDtoSpec (BeschwerdeVerlaufEntryCreateDtoSpec)  (optional)
         * @return operation
         */
        public CreateBeschwerdeVerlaufEntryOper body(BeschwerdeVerlaufEntryCreateDtoSpec beschwerdeVerlaufEntryCreateDtoSpec) {
            reqSpec.setBody(beschwerdeVerlaufEntryCreateDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public CreateBeschwerdeVerlaufEntryOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateBeschwerdeVerlaufEntryOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateBeschwerdeVerlaufEntryOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Creates a new Gesuch
     * 
     *
     * @see #body  (required)
     * return GesuchCreateResponseDtoSpec
     */
    public static class CreateGesuchOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch
         * @param handler handler
         * @return GesuchCreateResponseDtoSpec
         */
        public GesuchCreateResponseDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchCreateResponseDtoSpec> type = new TypeRef<GesuchCreateResponseDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param gesuchCreateDtoSpec (GesuchCreateDtoSpec)  (required)
         * @return operation
         */
        public CreateGesuchOper body(GesuchCreateDtoSpec gesuchCreateDtoSpec) {
            reqSpec.setBody(gesuchCreateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchTrancheIdPath Die ID von der GesuchTranche (required)
     * @see #fileUploadMultiPart  (required)
     * @see #kommentarForm  (optional)
     * return GesuchWithChangesDtoSpec
     */
    public static class CreateManuelleVerfuegungOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/manuelle-verfuegung";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateManuelleVerfuegungOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/{gesuchTrancheId}/manuelle-verfuegung
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/{gesuchTrancheId}/manuelle-verfuegung
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID) Die ID von der GesuchTranche (required)
         * @return operation
         */
        public CreateManuelleVerfuegungOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

         public static final String KOMMENTAR_FORM = "kommentar";

         /**
         * @param kommentar (String)  (optional)
         * @return operation
         */
         public CreateManuelleVerfuegungOper kommentarForm(Object... kommentar) {
            reqSpec.addFormParam(KOMMENTAR_FORM, kommentar);
            return this;
         }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param fileUpload (File)  (required)
         * @return operation
         */
         public CreateManuelleVerfuegungOper fileUploadMultiPart(File fileUpload) {
            reqSpec.addMultiPart(fileUpload);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateManuelleVerfuegungOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateManuelleVerfuegungOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * delete a Gesuch
     * 
     *
     * @see #gesuchIdPath  (required)
     */
    public static class DeleteGesuchOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/gesuch/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /gesuch/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public DeleteGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * @see #body  (optional)
     * return GesuchDtoSpec
     */
    public static class EinreichedatumManuellAendernOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}/einreichedatum";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public EinreichedatumManuellAendernOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}/einreichedatum
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuch/{gesuchId}/einreichedatum
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param einreichedatumAendernRequestDtoSpec (EinreichedatumAendernRequestDtoSpec)  (optional)
         * @return operation
         */
        public EinreichedatumManuellAendernOper body(EinreichedatumAendernRequestDtoSpec einreichedatumAendernRequestDtoSpec) {
            reqSpec.setBody(einreichedatumAendernRequestDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public EinreichedatumManuellAendernOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public EinreichedatumManuellAendernOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public EinreichedatumManuellAendernOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Das Gesuch einreichen als Gesuchsteller
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class GesuchEinreichenGsOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/einreichen/gs";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchEinreichenGsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/einreichen/gs
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/einreichen/gs
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GesuchEinreichenGsOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchEinreichenGsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchEinreichenGsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Dem GS übermitteln das Dokumente nicht akzeptiert wurden
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class GesuchFehlendeDokumenteUebermittelnOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/fehlendeDokumente";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchFehlendeDokumenteUebermittelnOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/fehlendeDokumente
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/fehlendeDokumente
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GesuchFehlendeDokumenteUebermittelnOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchFehlendeDokumenteUebermittelnOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchFehlendeDokumenteUebermittelnOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Das Gesuch manuell pruefen als Jurist
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class GesuchManuellPruefenJurOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/pruefen/jur";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchManuellPruefenJurOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/pruefen/jur
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/pruefen/jur
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GesuchManuellPruefenJurOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchManuellPruefenJurOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchManuellPruefenJurOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Das Gesuch manuell pruefen als Sachbearbeiter
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class GesuchManuellPruefenSBOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/pruefen/sb";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchManuellPruefenSBOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/pruefen/sb
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/pruefen/sb
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GesuchManuellPruefenSBOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchManuellPruefenSBOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchManuellPruefenSBOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Dem SB übermitteln das fehlende Dokumente hochgeladen wurden
     * 
     *
     * @see #gesuchTrancheIdPath Die ID von der GesuchTranche (required)
     * return GesuchDtoSpec
     */
    public static class GesuchTrancheFehlendeDokumenteEinreichenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/fehlendeDokumenteEinreichen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchTrancheFehlendeDokumenteEinreichenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/fehlendeDokumenteEinreichen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/fehlendeDokumenteEinreichen
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID) Die ID von der GesuchTranche (required)
         * @return operation
         */
        public GesuchTrancheFehlendeDokumenteEinreichenOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchTrancheFehlendeDokumenteEinreichenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchTrancheFehlendeDokumenteEinreichenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Gas Gesuch an den GS zurueckweisen
     * 
     *
     * @see #gesuchTrancheIdPath Die ID von der GesuchTranche (required)
     * @see #body  (optional)
     * return GesuchZurueckweisenResponseDtoSpec
     */
    public static class GesuchZurueckweisenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/gesuchZurueckweisen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchZurueckweisenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/gesuchZurueckweisen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/gesuchZurueckweisen
         * @param handler handler
         * @return GesuchZurueckweisenResponseDtoSpec
         */
        public GesuchZurueckweisenResponseDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchZurueckweisenResponseDtoSpec> type = new TypeRef<GesuchZurueckweisenResponseDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param kommentarDtoSpec (KommentarDtoSpec)  (optional)
         * @return operation
         */
        public GesuchZurueckweisenOper body(KommentarDtoSpec kommentarDtoSpec) {
            reqSpec.setBody(kommentarDtoSpec);
            return this;
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID) Die ID von der GesuchTranche (required)
         * @return operation
         */
        public GesuchZurueckweisenOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchZurueckweisenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchZurueckweisenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * return List&lt;BeschwerdeVerlaufEntryDtoSpec&gt;
     */
    public static class GetAllBeschwerdeVerlaufEntrysOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/beschwerde";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAllBeschwerdeVerlaufEntrysOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/beschwerde
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/beschwerde
         * @param handler handler
         * @return List&lt;BeschwerdeVerlaufEntryDtoSpec&gt;
         */
        public List<BeschwerdeVerlaufEntryDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<BeschwerdeVerlaufEntryDtoSpec>> type = new TypeRef<List<BeschwerdeVerlaufEntryDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public GetAllBeschwerdeVerlaufEntrysOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAllBeschwerdeVerlaufEntrysOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAllBeschwerdeVerlaufEntrysOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * All Verfuegungen for a gesuch
     * 
     *
     * @see #gesuchIdPath  (required)
     * return List&lt;VerfuegungDtoSpec&gt;
     */
    public static class GetAllVerfuegungenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/verfuegungen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAllVerfuegungenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/verfuegungen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/verfuegungen
         * @param handler handler
         * @return List&lt;VerfuegungDtoSpec&gt;
         */
        public List<VerfuegungDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<VerfuegungDtoSpec>> type = new TypeRef<List<VerfuegungDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetAllVerfuegungenOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAllVerfuegungenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAllVerfuegungenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Berechnet und holt die Berechnung für ein Gesuch
     * 
     *
     * @see #gesuchIdPath  (required)
     * return BerechnungsresultatDtoSpec
     */
    public static class GetBerechnungForGesuchOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/berechnung";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetBerechnungForGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/berechnung
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/berechnung
         * @param handler handler
         * @return BerechnungsresultatDtoSpec
         */
        public BerechnungsresultatDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<BerechnungsresultatDtoSpec> type = new TypeRef<BerechnungsresultatDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetBerechnungForGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetBerechnungForGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetBerechnungForGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Berechnet und generiert das Berechnungsblatt für ein Gesuch
     * 
     *
     * @see #tokenQuery  (required)
     * return File
     */
    public static class GetBerechnungsBlattForGesuchOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/berechnungsblatt";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetBerechnungsBlattForGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/octet-stream");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/berechnungsblatt
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/berechnungsblatt
         * @param handler handler
         * @return File
         */
        public File executeAs(Function<Response, Response> handler) {
            TypeRef<File> type = new TypeRef<File>(){};
            return execute(handler).as(type);
        }

        public static final String TOKEN_QUERY = "token";

        /**
         * @param token (String)  (required)
         * @return operation
         */
        public GetBerechnungsBlattForGesuchOper tokenQuery(Object... token) {
            reqSpec.addQueryParam(TOKEN_QUERY, token);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetBerechnungsBlattForGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetBerechnungsBlattForGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * get Berechnungsblatt Download Token
     * 
     *
     * @see #gesuchIdPath  (required)
     * return FileDownloadTokenDtoSpec
     */
    public static class GetBerechnungsblattDownloadTokenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/berechnungsblatt/token";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetBerechnungsblattDownloadTokenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/berechnungsblatt/token
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/berechnungsblatt/token
         * @param handler handler
         * @return FileDownloadTokenDtoSpec
         */
        public FileDownloadTokenDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<FileDownloadTokenDtoSpec> type = new TypeRef<FileDownloadTokenDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetBerechnungsblattDownloadTokenOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetBerechnungsblattDownloadTokenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetBerechnungsblattDownloadTokenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns the Gesuch with the given Id
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class GetGesuchGSOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/gs/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchGSOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/gs/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/gs/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetGesuchGSOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchGSOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchGSOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns the basic Gesuch info with the given Id
     * 
     *
     * @see #gesuchIdPath  (required)
     * return GesuchInfoDtoSpec
     */
    public static class GetGesuchInfoOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/info";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchInfoOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/info
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/info
         * @param handler handler
         * @return GesuchInfoDtoSpec
         */
        public GesuchInfoDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchInfoDtoSpec> type = new TypeRef<GesuchInfoDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetGesuchInfoOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchInfoOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchInfoOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns the Gesuch with the given Id
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class GetGesuchSBOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/sb/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchSBOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/sb/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/sb/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetGesuchSBOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchSBOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchSBOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns gesuche filtered by gs
     * 
     *
     * return List&lt;GesuchDtoSpec&gt;
     */
    public static class GetGesucheGsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/benutzer/me/gs";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesucheGsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/benutzer/me/gs
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/benutzer/me/gs
         * @param handler handler
         * @return List&lt;GesuchDtoSpec&gt;
         */
        public List<GesuchDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchDtoSpec>> type = new TypeRef<List<GesuchDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesucheGsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesucheGsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns gesuche filtered by status and sb
     * 
     *
     * @see #getGesucheSBQueryTypePath  (required)
     * @see #typQuery  (required)
     * @see #pageQuery  (required)
     * @see #pageSizeQuery  (required)
     * @see #fallNummerQuery  (optional)
     * @see #piaNachnameQuery  (optional)
     * @see #piaVornameQuery  (optional)
     * @see #piaGeburtsdatumQuery  (optional)
     * @see #statusQuery  (optional)
     * @see #bearbeiterQuery  (optional)
     * @see #letzteAktivitaetFromQuery  (optional)
     * @see #letzteAktivitaetToQuery  (optional)
     * @see #sortColumnQuery  (optional)
     * @see #sortOrderQuery  (optional)
     * return PaginatedSbDashboardDtoSpec
     */
    public static class GetGesucheSbOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/benutzer/me/sb/{getGesucheSBQueryType}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesucheSbOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/benutzer/me/sb/{getGesucheSBQueryType}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/benutzer/me/sb/{getGesucheSBQueryType}
         * @param handler handler
         * @return PaginatedSbDashboardDtoSpec
         */
        public PaginatedSbDashboardDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<PaginatedSbDashboardDtoSpec> type = new TypeRef<PaginatedSbDashboardDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GET_GESUCHE_S_B_QUERY_TYPE_PATH = "getGesucheSBQueryType";

        /**
         * @param getGesucheSBQueryType (GetGesucheSBQueryTypeDtoSpec)  (required)
         * @return operation
         */
        public GetGesucheSbOper getGesucheSBQueryTypePath(Object getGesucheSBQueryType) {
            reqSpec.addPathParam(GET_GESUCHE_S_B_QUERY_TYPE_PATH, getGesucheSBQueryType);
            return this;
        }

        public static final String FALL_NUMMER_QUERY = "fallNummer";

        /**
         * @param fallNummer (String)  (optional)
         * @return operation
         */
        public GetGesucheSbOper fallNummerQuery(Object... fallNummer) {
            reqSpec.addQueryParam(FALL_NUMMER_QUERY, fallNummer);
            return this;
        }

        public static final String PIA_NACHNAME_QUERY = "piaNachname";

        /**
         * @param piaNachname (String)  (optional)
         * @return operation
         */
        public GetGesucheSbOper piaNachnameQuery(Object... piaNachname) {
            reqSpec.addQueryParam(PIA_NACHNAME_QUERY, piaNachname);
            return this;
        }

        public static final String PIA_VORNAME_QUERY = "piaVorname";

        /**
         * @param piaVorname (String)  (optional)
         * @return operation
         */
        public GetGesucheSbOper piaVornameQuery(Object... piaVorname) {
            reqSpec.addQueryParam(PIA_VORNAME_QUERY, piaVorname);
            return this;
        }

        public static final String PIA_GEBURTSDATUM_QUERY = "piaGeburtsdatum";

        /**
         * @param piaGeburtsdatum (LocalDate)  (optional)
         * @return operation
         */
        public GetGesucheSbOper piaGeburtsdatumQuery(Object... piaGeburtsdatum) {
            reqSpec.addQueryParam(PIA_GEBURTSDATUM_QUERY, piaGeburtsdatum);
            return this;
        }

        public static final String STATUS_QUERY = "status";

        /**
         * @param status (String)  (optional)
         * @return operation
         */
        public GetGesucheSbOper statusQuery(Object... status) {
            reqSpec.addQueryParam(STATUS_QUERY, status);
            return this;
        }

        public static final String BEARBEITER_QUERY = "bearbeiter";

        /**
         * @param bearbeiter (String)  (optional)
         * @return operation
         */
        public GetGesucheSbOper bearbeiterQuery(Object... bearbeiter) {
            reqSpec.addQueryParam(BEARBEITER_QUERY, bearbeiter);
            return this;
        }

        public static final String LETZTE_AKTIVITAET_FROM_QUERY = "letzteAktivitaetFrom";

        /**
         * @param letzteAktivitaetFrom (LocalDate)  (optional)
         * @return operation
         */
        public GetGesucheSbOper letzteAktivitaetFromQuery(Object... letzteAktivitaetFrom) {
            reqSpec.addQueryParam(LETZTE_AKTIVITAET_FROM_QUERY, letzteAktivitaetFrom);
            return this;
        }

        public static final String LETZTE_AKTIVITAET_TO_QUERY = "letzteAktivitaetTo";

        /**
         * @param letzteAktivitaetTo (LocalDate)  (optional)
         * @return operation
         */
        public GetGesucheSbOper letzteAktivitaetToQuery(Object... letzteAktivitaetTo) {
            reqSpec.addQueryParam(LETZTE_AKTIVITAET_TO_QUERY, letzteAktivitaetTo);
            return this;
        }

        public static final String TYP_QUERY = "typ";

        /**
         * @param typ (GesuchTrancheTypDtoSpec)  (required)
         * @return operation
         */
        public GetGesucheSbOper typQuery(Object... typ) {
            reqSpec.addQueryParam(TYP_QUERY, typ);
            return this;
        }

        public static final String PAGE_QUERY = "page";

        /**
         * @param page (Integer)  (required)
         * @return operation
         */
        public GetGesucheSbOper pageQuery(Object... page) {
            reqSpec.addQueryParam(PAGE_QUERY, page);
            return this;
        }

        public static final String PAGE_SIZE_QUERY = "pageSize";

        /**
         * @param pageSize (Integer)  (required)
         * @return operation
         */
        public GetGesucheSbOper pageSizeQuery(Object... pageSize) {
            reqSpec.addQueryParam(PAGE_SIZE_QUERY, pageSize);
            return this;
        }

        public static final String SORT_COLUMN_QUERY = "sortColumn";

        /**
         * @param sortColumn (SbDashboardColumnDtoSpec)  (optional)
         * @return operation
         */
        public GetGesucheSbOper sortColumnQuery(Object... sortColumn) {
            reqSpec.addQueryParam(SORT_COLUMN_QUERY, sortColumn);
            return this;
        }

        public static final String SORT_ORDER_QUERY = "sortOrder";

        /**
         * @param sortOrder (SortOrderDtoSpec)  (optional)
         * @return operation
         */
        public GetGesucheSbOper sortOrderQuery(Object... sortOrder) {
            reqSpec.addQueryParam(SORT_ORDER_QUERY, sortOrder);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesucheSbOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesucheSbOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #aenderungIdPath Die ID der Aenderung (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class GetGsAenderungChangesInBearbeitungOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{aenderungId}/aenderung/gs/changes";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGsAenderungChangesInBearbeitungOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{aenderungId}/aenderung/gs/changes
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{aenderungId}/aenderung/gs/changes
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String AENDERUNG_ID_PATH = "aenderungId";

        /**
         * @param aenderungId (UUID) Die ID der Aenderung (required)
         * @return operation
         */
        public GetGsAenderungChangesInBearbeitungOper aenderungIdPath(Object aenderungId) {
            reqSpec.addPathParam(AENDERUNG_ID_PATH, aenderungId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGsAenderungChangesInBearbeitungOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGsAenderungChangesInBearbeitungOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns gesuche for dashboard filtered by gs
     * 
     *
     * return FallDashboardItemDtoSpec
     */
    public static class GetGsDashboardOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/benutzer/me/gs-dashboard";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGsDashboardOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/benutzer/me/gs-dashboard
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/benutzer/me/gs-dashboard
         * @param handler handler
         * @return FallDashboardItemDtoSpec
         */
        public FallDashboardItemDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<FallDashboardItemDtoSpec> type = new TypeRef<FallDashboardItemDtoSpec>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGsDashboardOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGsDashboardOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns the inital tranche changes by gesuchTrancheId
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class GetInitialTrancheChangesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/changes/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetInitialTrancheChangesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/changes/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/changes/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetInitialTrancheChangesOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetInitialTrancheChangesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetInitialTrancheChangesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #aenderungIdPath Die ID der Aenderung (required)
     * @see #revisionQuery  (optional)
     * return GesuchWithChangesDtoSpec
     */
    public static class GetSbAenderungChangesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{aenderungId}/aenderung/sb/changes";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetSbAenderungChangesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{aenderungId}/aenderung/sb/changes
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{aenderungId}/aenderung/sb/changes
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String AENDERUNG_ID_PATH = "aenderungId";

        /**
         * @param aenderungId (UUID) Die ID der Aenderung (required)
         * @return operation
         */
        public GetSbAenderungChangesOper aenderungIdPath(Object aenderungId) {
            reqSpec.addPathParam(AENDERUNG_ID_PATH, aenderungId);
            return this;
        }

        public static final String REVISION_QUERY = "revision";

        /**
         * @param revision (Integer)  (optional)
         * @return operation
         */
        public GetSbAenderungChangesOper revisionQuery(Object... revision) {
            reqSpec.addQueryParam(REVISION_QUERY, revision);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetSbAenderungChangesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetSbAenderungChangesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns gesuche for dashboard filtered by gs
     * 
     *
     * @see #fallIdPath  (required)
     * return FallDashboardItemDtoSpec
     */
    public static class GetSozialdienstMitarbeiterDashboardOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/benutzer/me/sozialdienst-mitarbeiter-dashboard/{fallId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetSozialdienstMitarbeiterDashboardOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/benutzer/me/sozialdienst-mitarbeiter-dashboard/{fallId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/benutzer/me/sozialdienst-mitarbeiter-dashboard/{fallId}
         * @param handler handler
         * @return FallDashboardItemDtoSpec
         */
        public FallDashboardItemDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<FallDashboardItemDtoSpec> type = new TypeRef<FallDashboardItemDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String FALL_ID_PATH = "fallId";

        /**
         * @param fallId (UUID)  (required)
         * @return operation
         */
        public GetSozialdienstMitarbeiterDashboardOper fallIdPath(Object fallId) {
            reqSpec.addPathParam(FALL_ID_PATH, fallId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetSozialdienstMitarbeiterDashboardOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetSozialdienstMitarbeiterDashboardOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Holt das Statusprotokoll für ein Gesuch
     * 
     *
     * @see #gesuchIdPath  (required)
     * return List&lt;StatusprotokollEntryDtoSpec&gt;
     */
    public static class GetStatusProtokollOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/statusprotokoll";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetStatusProtokollOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/statusprotokoll
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/statusprotokoll
         * @param handler handler
         * @return List&lt;StatusprotokollEntryDtoSpec&gt;
         */
        public List<StatusprotokollEntryDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<StatusprotokollEntryDtoSpec>> type = new TypeRef<List<StatusprotokollEntryDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetStatusProtokollOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetStatusProtokollOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetStatusProtokollOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Set gesuchsperiode for gesuch
     * 
     *
     * @see #gesuchTrancheIdPath Die ID von der GesuchTranche (required)
     * @see #gesuchsperiodeIdQuery  (required)
     * return GesuchDtoSpec
     */
    public static class SetGesuchsperiodeForGesuchOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/set-gesuchsperiode";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SetGesuchsperiodeForGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/set-gesuchsperiode
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/set-gesuchsperiode
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID) Die ID von der GesuchTranche (required)
         * @return operation
         */
        public SetGesuchsperiodeForGesuchOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        public static final String GESUCHSPERIODE_ID_QUERY = "gesuchsperiodeId";

        /**
         * @param gesuchsperiodeId (UUID)  (required)
         * @return operation
         */
        public SetGesuchsperiodeForGesuchOper gesuchsperiodeIdQuery(Object... gesuchsperiodeId) {
            reqSpec.addQueryParam(GESUCHSPERIODE_ID_QUERY, gesuchsperiodeId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SetGesuchsperiodeForGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SetGesuchsperiodeForGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Updates the Gesuch with the given Id
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #body  (required)
     */
    public static class UpdateGesuchOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param gesuchUpdateDtoSpec (GesuchUpdateDtoSpec)  (required)
         * @return operation
         */
        public UpdateGesuchOper body(GesuchUpdateDtoSpec gesuchUpdateDtoSpec) {
            reqSpec.setBody(gesuchUpdateDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public UpdateGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Nachfrist der nachzureichenden Dokumente anpassen
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #body  (optional)
     */
    public static class UpdateNachfristDokumenteOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}/nachfristDokumente";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateNachfristDokumenteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}/nachfristDokumente
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param nachfristAendernRequestDtoSpec (NachfristAendernRequestDtoSpec)  (optional)
         * @return operation
         */
        public UpdateNachfristDokumenteOper body(NachfristAendernRequestDtoSpec nachfristAendernRequestDtoSpec) {
            reqSpec.setBody(nachfristAendernRequestDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public UpdateNachfristDokumenteOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateNachfristDokumenteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateNachfristDokumenteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
