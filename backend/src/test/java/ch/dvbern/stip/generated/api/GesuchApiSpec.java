/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.BerechnungsresultatDtoSpec;
import ch.dvbern.stip.generated.dto.FallDashboardItemDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchCreateDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchTrancheTypDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchUpdateDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchWithChangesDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchstatusDtoSpec;
import ch.dvbern.stip.generated.dto.GetGesucheSBQueryTypeDtoSpec;
import ch.dvbern.stip.generated.dto.KommentarDtoSpec;
import java.time.LocalDate;
import ch.dvbern.stip.generated.dto.PaginatedSbDashboardDtoSpec;
import ch.dvbern.stip.generated.dto.SbDashboardColumnDtoSpec;
import ch.dvbern.stip.generated.dto.SortOrderDtoSpec;
import ch.dvbern.stip.generated.dto.StatusprotokollEntryDtoSpec;
import java.util.UUID;
import ch.dvbern.stip.generated.dto.ValidationReportDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class GesuchApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private GesuchApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static GesuchApiSpec gesuch(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new GesuchApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                bearbeitungAbschliessen(),
                changeGesuchStatusToBereitFuerBearbeitung(),
                changeGesuchStatusToInBearbeitung(),
                changeGesuchStatusToVerfuegt(),
                changeGesuchStatusToVersendet(),
                createGesuch(),
                deleteGesuch(),
                gesuchEinreichen(),
                gesuchFehlendeDokumenteUebermitteln(),
                gesuchTrancheFehlendeDokumenteEinreichen(),
                gesuchZurueckweisen(),
                getBerechnungForGesuch(),
                getCurrentGesuch(),
                getGesuch(),
                getGesucheGs(),
                getGesucheSb(),
                getGsDashboard(),
                getGsTrancheChanges(),
                getSbTrancheChanges(),
                getStatusProtokoll(),
                juristischAbklaeren(),
                updateGesuch()
        );
    }

    public BearbeitungAbschliessenOper bearbeitungAbschliessen() {
        return new BearbeitungAbschliessenOper(createReqSpec());
    }

    public ChangeGesuchStatusToBereitFuerBearbeitungOper changeGesuchStatusToBereitFuerBearbeitung() {
        return new ChangeGesuchStatusToBereitFuerBearbeitungOper(createReqSpec());
    }

    public ChangeGesuchStatusToInBearbeitungOper changeGesuchStatusToInBearbeitung() {
        return new ChangeGesuchStatusToInBearbeitungOper(createReqSpec());
    }

    public ChangeGesuchStatusToVerfuegtOper changeGesuchStatusToVerfuegt() {
        return new ChangeGesuchStatusToVerfuegtOper(createReqSpec());
    }

    public ChangeGesuchStatusToVersendetOper changeGesuchStatusToVersendet() {
        return new ChangeGesuchStatusToVersendetOper(createReqSpec());
    }

    public CreateGesuchOper createGesuch() {
        return new CreateGesuchOper(createReqSpec());
    }

    public DeleteGesuchOper deleteGesuch() {
        return new DeleteGesuchOper(createReqSpec());
    }

    public GesuchEinreichenOper gesuchEinreichen() {
        return new GesuchEinreichenOper(createReqSpec());
    }

    public GesuchFehlendeDokumenteUebermittelnOper gesuchFehlendeDokumenteUebermitteln() {
        return new GesuchFehlendeDokumenteUebermittelnOper(createReqSpec());
    }

    public GesuchTrancheFehlendeDokumenteEinreichenOper gesuchTrancheFehlendeDokumenteEinreichen() {
        return new GesuchTrancheFehlendeDokumenteEinreichenOper(createReqSpec());
    }

    public GesuchZurueckweisenOper gesuchZurueckweisen() {
        return new GesuchZurueckweisenOper(createReqSpec());
    }

    public GetBerechnungForGesuchOper getBerechnungForGesuch() {
        return new GetBerechnungForGesuchOper(createReqSpec());
    }

    public GetCurrentGesuchOper getCurrentGesuch() {
        return new GetCurrentGesuchOper(createReqSpec());
    }

    public GetGesuchOper getGesuch() {
        return new GetGesuchOper(createReqSpec());
    }

    public GetGesucheGsOper getGesucheGs() {
        return new GetGesucheGsOper(createReqSpec());
    }

    public GetGesucheSbOper getGesucheSb() {
        return new GetGesucheSbOper(createReqSpec());
    }

    public GetGsDashboardOper getGsDashboard() {
        return new GetGsDashboardOper(createReqSpec());
    }

    public GetGsTrancheChangesOper getGsTrancheChanges() {
        return new GetGsTrancheChangesOper(createReqSpec());
    }

    public GetSbTrancheChangesOper getSbTrancheChanges() {
        return new GetSbTrancheChangesOper(createReqSpec());
    }

    public GetStatusProtokollOper getStatusProtokoll() {
        return new GetStatusProtokollOper(createReqSpec());
    }

    public JuristischAbklaerenOper juristischAbklaeren() {
        return new JuristischAbklaerenOper(createReqSpec());
    }

    public UpdateGesuchOper updateGesuch() {
        return new UpdateGesuchOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public GesuchApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Die Bearbeitung des Gesuch durch den SB abschliessen
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     */
    public static class BearbeitungAbschliessenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}/bearbeitungAbschliessen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public BearbeitungAbschliessenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}/bearbeitungAbschliessen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public BearbeitungAbschliessenOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public BearbeitungAbschliessenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public BearbeitungAbschliessenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class ChangeGesuchStatusToBereitFuerBearbeitungOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/bereit-fuer-bearbeitung/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToBereitFuerBearbeitungOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/bereit-fuer-bearbeitung/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/bereit-fuer-bearbeitung/{gesuchId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToBereitFuerBearbeitungOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToBereitFuerBearbeitungOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToBereitFuerBearbeitungOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class ChangeGesuchStatusToInBearbeitungOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/in-bearbeitung/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToInBearbeitungOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/in-bearbeitung/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/in-bearbeitung/{gesuchId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToInBearbeitungOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToInBearbeitungOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToInBearbeitungOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class ChangeGesuchStatusToVerfuegtOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/verfuegt/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToVerfuegtOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/verfuegt/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/verfuegt/{gesuchId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToVerfuegtOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVerfuegtOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVerfuegtOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class ChangeGesuchStatusToVersendetOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/status/versendet/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeGesuchStatusToVersendetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/status/versendet/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch/status/versendet/{gesuchId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public ChangeGesuchStatusToVersendetOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVersendetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeGesuchStatusToVersendetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Creates a new Gesuch
     * 
     *
     * @see #body  (required)
     * return UUID
     */
    public static class CreateGesuchOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuch
         * @param handler handler
         * @return UUID
         */
        public UUID executeAs(Function<Response, Response> handler) {
            TypeRef<UUID> type = new TypeRef<UUID>(){};
            return execute(handler).as(type);
        }

         /**
         * @param gesuchCreateDtoSpec (GesuchCreateDtoSpec)  (required)
         * @return operation
         */
        public CreateGesuchOper body(GesuchCreateDtoSpec gesuchCreateDtoSpec) {
            reqSpec.setBody(gesuchCreateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * delete a Gesuch
     * 
     *
     * @see #gesuchIdPath  (required)
     */
    public static class DeleteGesuchOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/gesuch/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /gesuch/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public DeleteGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Das Gesuch einreichen
     * 
     *
     * @see #gesuchIdPath  (required)
     */
    public static class GesuchEinreichenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}/einreichen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchEinreichenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}/einreichen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GesuchEinreichenOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchEinreichenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchEinreichenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Dem GS übermitteln das Dokumente nicht akzeptiert wurden
     * 
     *
     * @see #gesuchIdPath  (required)
     */
    public static class GesuchFehlendeDokumenteUebermittelnOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}/fehlendeDokumente";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchFehlendeDokumenteUebermittelnOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}/fehlendeDokumente
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GesuchFehlendeDokumenteUebermittelnOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchFehlendeDokumenteUebermittelnOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchFehlendeDokumenteUebermittelnOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Dem SB übermitteln das fehlende Dokumente hochgeladen wurden
     * 
     *
     * @see #gesuchTrancheIdPath  (required)
     */
    public static class GesuchTrancheFehlendeDokumenteEinreichenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchTrancheId}/fehlendeDokumenteEinreichen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchTrancheFehlendeDokumenteEinreichenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchTrancheId}/fehlendeDokumenteEinreichen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GesuchTrancheFehlendeDokumenteEinreichenOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchTrancheFehlendeDokumenteEinreichenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchTrancheFehlendeDokumenteEinreichenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Gas Gesuch an den GS zurueckweisen
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * @see #body  (optional)
     */
    public static class GesuchZurueckweisenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}/gesuchZurueckweisen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchZurueckweisenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}/gesuchZurueckweisen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param kommentarDtoSpec (KommentarDtoSpec)  (optional)
         * @return operation
         */
        public GesuchZurueckweisenOper body(KommentarDtoSpec kommentarDtoSpec) {
            reqSpec.setBody(kommentarDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public GesuchZurueckweisenOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchZurueckweisenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchZurueckweisenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Berechnet und holt die Berechnung für ein Gesuch
     * 
     *
     * @see #gesuchIdPath  (required)
     * return BerechnungsresultatDtoSpec
     */
    public static class GetBerechnungForGesuchOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/berechnung";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetBerechnungForGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/berechnung
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/berechnung
         * @param handler handler
         * @return BerechnungsresultatDtoSpec
         */
        public BerechnungsresultatDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<BerechnungsresultatDtoSpec> type = new TypeRef<BerechnungsresultatDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetBerechnungForGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetBerechnungForGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetBerechnungForGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns the Gesuch with the given Id
     * 
     *
     * @see #gesuchIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class GetCurrentGesuchOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/current";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCurrentGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/current
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/current
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetCurrentGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCurrentGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCurrentGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns the Gesuch with the given Id
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #gesuchTrancheIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class GetGesuchOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/{gesuchTrancheId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/{gesuchTrancheId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/{gesuchTrancheId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        public static final String GESUCH_TRANCHE_ID_PATH = "gesuchTrancheId";

        /**
         * @param gesuchTrancheId (UUID)  (required)
         * @return operation
         */
        public GetGesuchOper gesuchTrancheIdPath(Object gesuchTrancheId) {
            reqSpec.addPathParam(GESUCH_TRANCHE_ID_PATH, gesuchTrancheId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns gesuche filtered by gs
     * 
     *
     * return List&lt;GesuchDtoSpec&gt;
     */
    public static class GetGesucheGsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/benutzer/me/gs";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesucheGsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/benutzer/me/gs
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/benutzer/me/gs
         * @param handler handler
         * @return List&lt;GesuchDtoSpec&gt;
         */
        public List<GesuchDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchDtoSpec>> type = new TypeRef<List<GesuchDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesucheGsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesucheGsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns gesuche filtered by status and sb
     * 
     *
     * @see #getGesucheSBQueryTypePath  (required)
     * @see #typQuery  (required)
     * @see #pageQuery  (required)
     * @see #pageSizeQuery  (required)
     * @see #fallNummerQuery  (optional)
     * @see #piaNachnameQuery  (optional)
     * @see #piaVornameQuery  (optional)
     * @see #piaGeburtsdatumQuery  (optional)
     * @see #statusQuery  (optional)
     * @see #bearbeiterQuery  (optional)
     * @see #letzteAktivitaetFromQuery  (optional)
     * @see #letzteAktivitaetToQuery  (optional)
     * @see #sortColumnQuery  (optional)
     * @see #sortOrderQuery  (optional)
     * return PaginatedSbDashboardDtoSpec
     */
    public static class GetGesucheSbOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/benutzer/me/sb/{getGesucheSBQueryType}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesucheSbOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/benutzer/me/sb/{getGesucheSBQueryType}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/benutzer/me/sb/{getGesucheSBQueryType}
         * @param handler handler
         * @return PaginatedSbDashboardDtoSpec
         */
        public PaginatedSbDashboardDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<PaginatedSbDashboardDtoSpec> type = new TypeRef<PaginatedSbDashboardDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GET_GESUCHE_S_B_QUERY_TYPE_PATH = "getGesucheSBQueryType";

        /**
         * @param getGesucheSBQueryType (GetGesucheSBQueryTypeDtoSpec)  (required)
         * @return operation
         */
        public GetGesucheSbOper getGesucheSBQueryTypePath(Object getGesucheSBQueryType) {
            reqSpec.addPathParam(GET_GESUCHE_S_B_QUERY_TYPE_PATH, getGesucheSBQueryType);
            return this;
        }

        public static final String FALL_NUMMER_QUERY = "fallNummer";

        /**
         * @param fallNummer (String)  (optional)
         * @return operation
         */
        public GetGesucheSbOper fallNummerQuery(Object... fallNummer) {
            reqSpec.addQueryParam(FALL_NUMMER_QUERY, fallNummer);
            return this;
        }

        public static final String PIA_NACHNAME_QUERY = "piaNachname";

        /**
         * @param piaNachname (String)  (optional)
         * @return operation
         */
        public GetGesucheSbOper piaNachnameQuery(Object... piaNachname) {
            reqSpec.addQueryParam(PIA_NACHNAME_QUERY, piaNachname);
            return this;
        }

        public static final String PIA_VORNAME_QUERY = "piaVorname";

        /**
         * @param piaVorname (String)  (optional)
         * @return operation
         */
        public GetGesucheSbOper piaVornameQuery(Object... piaVorname) {
            reqSpec.addQueryParam(PIA_VORNAME_QUERY, piaVorname);
            return this;
        }

        public static final String PIA_GEBURTSDATUM_QUERY = "piaGeburtsdatum";

        /**
         * @param piaGeburtsdatum (LocalDate)  (optional)
         * @return operation
         */
        public GetGesucheSbOper piaGeburtsdatumQuery(Object... piaGeburtsdatum) {
            reqSpec.addQueryParam(PIA_GEBURTSDATUM_QUERY, piaGeburtsdatum);
            return this;
        }

        public static final String STATUS_QUERY = "status";

        /**
         * @param status (GesuchstatusDtoSpec)  (optional)
         * @return operation
         */
        public GetGesucheSbOper statusQuery(Object... status) {
            reqSpec.addQueryParam(STATUS_QUERY, status);
            return this;
        }

        public static final String BEARBEITER_QUERY = "bearbeiter";

        /**
         * @param bearbeiter (String)  (optional)
         * @return operation
         */
        public GetGesucheSbOper bearbeiterQuery(Object... bearbeiter) {
            reqSpec.addQueryParam(BEARBEITER_QUERY, bearbeiter);
            return this;
        }

        public static final String LETZTE_AKTIVITAET_FROM_QUERY = "letzteAktivitaetFrom";

        /**
         * @param letzteAktivitaetFrom (LocalDate)  (optional)
         * @return operation
         */
        public GetGesucheSbOper letzteAktivitaetFromQuery(Object... letzteAktivitaetFrom) {
            reqSpec.addQueryParam(LETZTE_AKTIVITAET_FROM_QUERY, letzteAktivitaetFrom);
            return this;
        }

        public static final String LETZTE_AKTIVITAET_TO_QUERY = "letzteAktivitaetTo";

        /**
         * @param letzteAktivitaetTo (LocalDate)  (optional)
         * @return operation
         */
        public GetGesucheSbOper letzteAktivitaetToQuery(Object... letzteAktivitaetTo) {
            reqSpec.addQueryParam(LETZTE_AKTIVITAET_TO_QUERY, letzteAktivitaetTo);
            return this;
        }

        public static final String TYP_QUERY = "typ";

        /**
         * @param typ (GesuchTrancheTypDtoSpec)  (required)
         * @return operation
         */
        public GetGesucheSbOper typQuery(Object... typ) {
            reqSpec.addQueryParam(TYP_QUERY, typ);
            return this;
        }

        public static final String PAGE_QUERY = "page";

        /**
         * @param page (Integer)  (required)
         * @return operation
         */
        public GetGesucheSbOper pageQuery(Object... page) {
            reqSpec.addQueryParam(PAGE_QUERY, page);
            return this;
        }

        public static final String PAGE_SIZE_QUERY = "pageSize";

        /**
         * @param pageSize (Integer)  (required)
         * @return operation
         */
        public GetGesucheSbOper pageSizeQuery(Object... pageSize) {
            reqSpec.addQueryParam(PAGE_SIZE_QUERY, pageSize);
            return this;
        }

        public static final String SORT_COLUMN_QUERY = "sortColumn";

        /**
         * @param sortColumn (SbDashboardColumnDtoSpec)  (optional)
         * @return operation
         */
        public GetGesucheSbOper sortColumnQuery(Object... sortColumn) {
            reqSpec.addQueryParam(SORT_COLUMN_QUERY, sortColumn);
            return this;
        }

        public static final String SORT_ORDER_QUERY = "sortOrder";

        /**
         * @param sortOrder (SortOrderDtoSpec)  (optional)
         * @return operation
         */
        public GetGesucheSbOper sortOrderQuery(Object... sortOrder) {
            reqSpec.addQueryParam(SORT_ORDER_QUERY, sortOrder);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesucheSbOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesucheSbOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns gesuche for dashboard filtered by gs
     * 
     *
     * return List&lt;FallDashboardItemDtoSpec&gt;
     */
    public static class GetGsDashboardOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/benutzer/me/gs-dashboard";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGsDashboardOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/benutzer/me/gs-dashboard
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/benutzer/me/gs-dashboard
         * @param handler handler
         * @return List&lt;FallDashboardItemDtoSpec&gt;
         */
        public List<FallDashboardItemDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<FallDashboardItemDtoSpec>> type = new TypeRef<List<FallDashboardItemDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGsDashboardOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGsDashboardOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #aenderungIdPath Die ID der Aenderung (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class GetGsTrancheChangesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{aenderungId}/aenderung/gs/changes";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGsTrancheChangesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{aenderungId}/aenderung/gs/changes
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{aenderungId}/aenderung/gs/changes
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String AENDERUNG_ID_PATH = "aenderungId";

        /**
         * @param aenderungId (UUID) Die ID der Aenderung (required)
         * @return operation
         */
        public GetGsTrancheChangesOper aenderungIdPath(Object aenderungId) {
            reqSpec.addPathParam(AENDERUNG_ID_PATH, aenderungId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGsTrancheChangesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGsTrancheChangesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #aenderungIdPath Die ID der Aenderung (required)
     * return GesuchWithChangesDtoSpec
     */
    public static class GetSbTrancheChangesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{aenderungId}/aenderung/sb/changes";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetSbTrancheChangesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{aenderungId}/aenderung/sb/changes
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{aenderungId}/aenderung/sb/changes
         * @param handler handler
         * @return GesuchWithChangesDtoSpec
         */
        public GesuchWithChangesDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchWithChangesDtoSpec> type = new TypeRef<GesuchWithChangesDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String AENDERUNG_ID_PATH = "aenderungId";

        /**
         * @param aenderungId (UUID) Die ID der Aenderung (required)
         * @return operation
         */
        public GetSbTrancheChangesOper aenderungIdPath(Object aenderungId) {
            reqSpec.addPathParam(AENDERUNG_ID_PATH, aenderungId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetSbTrancheChangesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetSbTrancheChangesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Holt das Statusprotokoll für ein Gesuch
     * 
     *
     * @see #gesuchIdPath  (required)
     * return List&lt;StatusprotokollEntryDtoSpec&gt;
     */
    public static class GetStatusProtokollOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/statusprotokoll";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetStatusProtokollOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/statusprotokoll
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/statusprotokoll
         * @param handler handler
         * @return List&lt;StatusprotokollEntryDtoSpec&gt;
         */
        public List<StatusprotokollEntryDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<StatusprotokollEntryDtoSpec>> type = new TypeRef<List<StatusprotokollEntryDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetStatusProtokollOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetStatusProtokollOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetStatusProtokollOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Gas Gesuch an die Juristen ueberweisen
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     */
    public static class JuristischAbklaerenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}/juristischAbklaeren";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public JuristischAbklaerenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}/juristischAbklaeren
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public JuristischAbklaerenOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public JuristischAbklaerenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public JuristischAbklaerenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Updates the Gesuch with the given Id
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #body  (required)
     */
    public static class UpdateGesuchOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param gesuchUpdateDtoSpec (GesuchUpdateDtoSpec)  (required)
         * @return operation
         */
        public UpdateGesuchOper body(GesuchUpdateDtoSpec gesuchUpdateDtoSpec) {
            reqSpec.setBody(gesuchUpdateDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public UpdateGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
