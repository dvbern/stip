/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.DokumentDtoSpec;
import ch.dvbern.stip.generated.dto.DokumentTypDtoSpec;
import java.io.File;
import ch.dvbern.stip.generated.dto.GesuchCreateDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchUpdateDtoSpec;
import java.util.UUID;
import ch.dvbern.stip.generated.dto.ValidationReportDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class GesuchApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private GesuchApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static GesuchApiSpec gesuch(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new GesuchApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createDokument(),
                createGesuch(),
                deleteDokument(),
                deleteGesuch(),
                gesuchEinreichen(),
                gesuchEinreichenValidieren(),
                getDokument(),
                getDokumenteForTyp(),
                getGesuch(),
                getGesuche(),
                getGesucheForBenutzer(),
                getGesucheForFall(),
                updateGesuch(),
                validateGesuchPages()
        );
    }

    public CreateDokumentOper createDokument() {
        return new CreateDokumentOper(createReqSpec());
    }

    public CreateGesuchOper createGesuch() {
        return new CreateGesuchOper(createReqSpec());
    }

    public DeleteDokumentOper deleteDokument() {
        return new DeleteDokumentOper(createReqSpec());
    }

    public DeleteGesuchOper deleteGesuch() {
        return new DeleteGesuchOper(createReqSpec());
    }

    public GesuchEinreichenOper gesuchEinreichen() {
        return new GesuchEinreichenOper(createReqSpec());
    }

    public GesuchEinreichenValidierenOper gesuchEinreichenValidieren() {
        return new GesuchEinreichenValidierenOper(createReqSpec());
    }

    public GetDokumentOper getDokument() {
        return new GetDokumentOper(createReqSpec());
    }

    public GetDokumenteForTypOper getDokumenteForTyp() {
        return new GetDokumenteForTypOper(createReqSpec());
    }

    public GetGesuchOper getGesuch() {
        return new GetGesuchOper(createReqSpec());
    }

    public GetGesucheOper getGesuche() {
        return new GetGesucheOper(createReqSpec());
    }

    public GetGesucheForBenutzerOper getGesucheForBenutzer() {
        return new GetGesucheForBenutzerOper(createReqSpec());
    }

    public GetGesucheForFallOper getGesucheForFall() {
        return new GetGesucheForFallOper(createReqSpec());
    }

    public UpdateGesuchOper updateGesuch() {
        return new UpdateGesuchOper(createReqSpec());
    }

    public ValidateGesuchPagesOper validateGesuchPages() {
        return new ValidateGesuchPagesOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public GesuchApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * @see #dokumentTypPath  (required)
     * @see #gesuchIdPath  (required)
     * @see #fileUploadMultiPart  (required)
     */
    public static class CreateDokumentOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch/{gesuchId}/dokument/{dokumentTyp}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateDokumentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch/{gesuchId}/dokument/{dokumentTyp}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String DOKUMENT_TYP_PATH = "dokumentTyp";

        /**
         * @param dokumentTyp (DokumentTypDtoSpec)  (required)
         * @return operation
         */
        public CreateDokumentOper dokumentTypPath(Object dokumentTyp) {
            reqSpec.addPathParam(DOKUMENT_TYP_PATH, dokumentTyp);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public CreateDokumentOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param fileUpload (File)  (required)
         * @return operation
         */
         public CreateDokumentOper fileUploadMultiPart(File fileUpload) {
            reqSpec.addMultiPart(fileUpload);
            return this;
         }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateDokumentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateDokumentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Creates a new Gesuch
     * 
     *
     * @see #body  (required)
     */
    public static class CreateGesuchOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuch";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuch
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param gesuchCreateDtoSpec (GesuchCreateDtoSpec)  (required)
         * @return operation
         */
        public CreateGesuchOper body(GesuchCreateDtoSpec gesuchCreateDtoSpec) {
            reqSpec.setBody(gesuchCreateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * deletes a Dokument
     * 
     *
     * @see #dokumentIdPath  (required)
     * @see #dokumentTypPath  (required)
     * @see #gesuchIdPath  (required)
     */
    public static class DeleteDokumentOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/gesuch/{gesuchId}/dokument/{dokumentTyp}/{dokumentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteDokumentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /gesuch/{gesuchId}/dokument/{dokumentTyp}/{dokumentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String DOKUMENT_ID_PATH = "dokumentId";

        /**
         * @param dokumentId (UUID)  (required)
         * @return operation
         */
        public DeleteDokumentOper dokumentIdPath(Object dokumentId) {
            reqSpec.addPathParam(DOKUMENT_ID_PATH, dokumentId);
            return this;
        }

        public static final String DOKUMENT_TYP_PATH = "dokumentTyp";

        /**
         * @param dokumentTyp (DokumentTypDtoSpec)  (required)
         * @return operation
         */
        public DeleteDokumentOper dokumentTypPath(Object dokumentTyp) {
            reqSpec.addPathParam(DOKUMENT_TYP_PATH, dokumentTyp);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public DeleteDokumentOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteDokumentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteDokumentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * delete a Gesuch
     * 
     *
     * @see #gesuchIdPath  (required)
     */
    public static class DeleteGesuchOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/gesuch/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /gesuch/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public DeleteGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Das Gesuch einreichen
     * 
     *
     * @see #gesuchIdPath  (required)
     */
    public static class GesuchEinreichenOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}/einreichen";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchEinreichenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}/einreichen
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GesuchEinreichenOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchEinreichenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchEinreichenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Das Gesuch Einreichen Validation Report generieren
     * 
     *
     * @see #gesuchIdPath  (required)
     * return ValidationReportDtoSpec
     */
    public static class GesuchEinreichenValidierenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/einreichen/validieren";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GesuchEinreichenValidierenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/einreichen/validieren
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/einreichen/validieren
         * @param handler handler
         * @return ValidationReportDtoSpec
         */
        public ValidationReportDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<ValidationReportDtoSpec> type = new TypeRef<ValidationReportDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GesuchEinreichenValidierenOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GesuchEinreichenValidierenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GesuchEinreichenValidierenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * get Dokument
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #dokumentTypPath  (required)
     * @see #dokumentIdPath  (required)
     * return File
     */
    public static class GetDokumentOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/dokument/{dokumentTyp}/{dokumentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDokumentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/octet-stream");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/dokument/{dokumentTyp}/{dokumentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/dokument/{dokumentTyp}/{dokumentId}
         * @param handler handler
         * @return File
         */
        public File executeAs(Function<Response, Response> handler) {
            TypeRef<File> type = new TypeRef<File>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetDokumentOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        public static final String DOKUMENT_TYP_PATH = "dokumentTyp";

        /**
         * @param dokumentTyp (DokumentTypDtoSpec)  (required)
         * @return operation
         */
        public GetDokumentOper dokumentTypPath(Object dokumentTyp) {
            reqSpec.addPathParam(DOKUMENT_TYP_PATH, dokumentTyp);
            return this;
        }

        public static final String DOKUMENT_ID_PATH = "dokumentId";

        /**
         * @param dokumentId (UUID)  (required)
         * @return operation
         */
        public GetDokumentOper dokumentIdPath(Object dokumentId) {
            reqSpec.addPathParam(DOKUMENT_ID_PATH, dokumentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDokumentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDokumentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returniert der GesuchDokument mit der gegebene Id und alle Dokument die dazu gehoeren.
     * 
     *
     * @see #dokumentTypPath  (required)
     * @see #gesuchIdPath  (required)
     * return List&lt;DokumentDtoSpec&gt;
     */
    public static class GetDokumenteForTypOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}/dokument/{dokumentTyp}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetDokumenteForTypOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}/dokument/{dokumentTyp}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}/dokument/{dokumentTyp}
         * @param handler handler
         * @return List&lt;DokumentDtoSpec&gt;
         */
        public List<DokumentDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<DokumentDtoSpec>> type = new TypeRef<List<DokumentDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String DOKUMENT_TYP_PATH = "dokumentTyp";

        /**
         * @param dokumentTyp (DokumentTypDtoSpec)  (required)
         * @return operation
         */
        public GetDokumenteForTypOper dokumentTypPath(Object dokumentTyp) {
            reqSpec.addPathParam(DOKUMENT_TYP_PATH, dokumentTyp);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetDokumenteForTypOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetDokumenteForTypOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetDokumenteForTypOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns the Gesuch with the given Id
     * 
     *
     * @see #gesuchIdPath  (required)
     * return GesuchDtoSpec
     */
    public static class GetGesuchOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/{gesuchId}
         * @param handler handler
         * @return GesuchDtoSpec
         */
        public GesuchDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchDtoSpec> type = new TypeRef<GesuchDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public GetGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns all Gesuche
     * 
     *
     * return List&lt;GesuchDtoSpec&gt;
     */
    public static class GetGesucheOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesucheOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch
         * @param handler handler
         * @return List&lt;GesuchDtoSpec&gt;
         */
        public List<GesuchDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchDtoSpec>> type = new TypeRef<List<GesuchDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesucheOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesucheOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all Gesuch for Benutzende
     * 
     *
     * @see #benutzerIdPath  (required)
     * return List&lt;GesuchDtoSpec&gt;
     */
    public static class GetGesucheForBenutzerOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/benutzer/{benutzerId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesucheForBenutzerOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/benutzer/{benutzerId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/benutzer/{benutzerId}
         * @param handler handler
         * @return List&lt;GesuchDtoSpec&gt;
         */
        public List<GesuchDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchDtoSpec>> type = new TypeRef<List<GesuchDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String BENUTZER_ID_PATH = "benutzerId";

        /**
         * @param benutzerId (UUID)  (required)
         * @return operation
         */
        public GetGesucheForBenutzerOper benutzerIdPath(Object benutzerId) {
            reqSpec.addPathParam(BENUTZER_ID_PATH, benutzerId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesucheForBenutzerOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesucheForBenutzerOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Return alle Gesuche die gehören zu dieser Fall
     * 
     *
     * @see #fallIdPath  (required)
     * return List&lt;GesuchDtoSpec&gt;
     */
    public static class GetGesucheForFallOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/fall/{fallId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesucheForFallOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/fall/{fallId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/fall/{fallId}
         * @param handler handler
         * @return List&lt;GesuchDtoSpec&gt;
         */
        public List<GesuchDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchDtoSpec>> type = new TypeRef<List<GesuchDtoSpec>>(){};
            return execute(handler).as(type);
        }

        public static final String FALL_ID_PATH = "fallId";

        /**
         * @param fallId (UUID)  (required)
         * @return operation
         */
        public GetGesucheForFallOper fallIdPath(Object fallId) {
            reqSpec.addPathParam(FALL_ID_PATH, fallId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesucheForFallOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesucheForFallOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Updates the Gesuch with the given Id
     * 
     *
     * @see #gesuchIdPath  (required)
     * @see #body  (required)
     */
    public static class UpdateGesuchOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuch/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuch/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param gesuchUpdateDtoSpec (GesuchUpdateDtoSpec)  (required)
         * @return operation
         */
        public UpdateGesuchOper body(GesuchUpdateDtoSpec gesuchUpdateDtoSpec) {
            reqSpec.setBody(gesuchUpdateDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public UpdateGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #gesuchIdPath  (required)
     * return ValidationReportDtoSpec
     */
    public static class ValidateGesuchPagesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuch/validatePages/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ValidateGesuchPagesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuch/validatePages/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuch/validatePages/{gesuchId}
         * @param handler handler
         * @return ValidationReportDtoSpec
         */
        public ValidationReportDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<ValidationReportDtoSpec> type = new TypeRef<ValidationReportDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public ValidateGesuchPagesOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ValidateGesuchPagesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ValidateGesuchPagesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
