/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.SozialdienstAdminDtoSpec;
import ch.dvbern.stip.generated.dto.SozialdienstAdminUpdateDtoSpec;
import ch.dvbern.stip.generated.dto.SozialdienstBenutzerCreateDtoSpec;
import ch.dvbern.stip.generated.dto.SozialdienstBenutzerDtoSpec;
import ch.dvbern.stip.generated.dto.SozialdienstBenutzerUpdateDtoSpec;
import ch.dvbern.stip.generated.dto.SozialdienstCreateDtoSpec;
import ch.dvbern.stip.generated.dto.SozialdienstDtoSpec;
import ch.dvbern.stip.generated.dto.SozialdienstSlimDtoSpec;
import ch.dvbern.stip.generated.dto.SozialdienstUpdateDtoSpec;
import java.util.UUID;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class SozialdienstApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private SozialdienstApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static SozialdienstApiSpec sozialdienst(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new SozialdienstApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createSozialdienst(),
                createSozialdienstBenutzer(),
                deleteSozialdienst(),
                deleteSozialdienstBenutzer(),
                getAllSozialdienste(),
                getAllSozialdiensteSlim(),
                getSozialdienst(),
                getSozialdienstBenutzer(),
                replaceSozialdienstAdmin(),
                updateSozialdienst(),
                updateSozialdienstAdmin(),
                updateSozialdienstBenutzer()
        );
    }

    public CreateSozialdienstOper createSozialdienst() {
        return new CreateSozialdienstOper(createReqSpec());
    }

    public CreateSozialdienstBenutzerOper createSozialdienstBenutzer() {
        return new CreateSozialdienstBenutzerOper(createReqSpec());
    }

    public DeleteSozialdienstOper deleteSozialdienst() {
        return new DeleteSozialdienstOper(createReqSpec());
    }

    public DeleteSozialdienstBenutzerOper deleteSozialdienstBenutzer() {
        return new DeleteSozialdienstBenutzerOper(createReqSpec());
    }

    public GetAllSozialdiensteOper getAllSozialdienste() {
        return new GetAllSozialdiensteOper(createReqSpec());
    }

    public GetAllSozialdiensteSlimOper getAllSozialdiensteSlim() {
        return new GetAllSozialdiensteSlimOper(createReqSpec());
    }

    public GetSozialdienstOper getSozialdienst() {
        return new GetSozialdienstOper(createReqSpec());
    }

    public GetSozialdienstBenutzerOper getSozialdienstBenutzer() {
        return new GetSozialdienstBenutzerOper(createReqSpec());
    }

    public ReplaceSozialdienstAdminOper replaceSozialdienstAdmin() {
        return new ReplaceSozialdienstAdminOper(createReqSpec());
    }

    public UpdateSozialdienstOper updateSozialdienst() {
        return new UpdateSozialdienstOper(createReqSpec());
    }

    public UpdateSozialdienstAdminOper updateSozialdienstAdmin() {
        return new UpdateSozialdienstAdminOper(createReqSpec());
    }

    public UpdateSozialdienstBenutzerOper updateSozialdienstBenutzer() {
        return new UpdateSozialdienstBenutzerOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public SozialdienstApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create a new Sozialdienst
     * 
     *
     * @see #body  (optional)
     * return SozialdienstDtoSpec
     */
    public static class CreateSozialdienstOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/sozialdienst";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateSozialdienstOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /sozialdienst
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /sozialdienst
         * @param handler handler
         * @return SozialdienstDtoSpec
         */
        public SozialdienstDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<SozialdienstDtoSpec> type = new TypeRef<SozialdienstDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param sozialdienstCreateDtoSpec (SozialdienstCreateDtoSpec)  (optional)
         * @return operation
         */
        public CreateSozialdienstOper body(SozialdienstCreateDtoSpec sozialdienstCreateDtoSpec) {
            reqSpec.setBody(sozialdienstCreateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateSozialdienstOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateSozialdienstOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * create a new SozialdienstBenutzer that is assigned to the Sozialdienst of the currently logged in SozialdienstAdmin
     *
     * @see #body  (optional)
     * return SozialdienstBenutzerDtoSpec
     */
    public static class CreateSozialdienstBenutzerOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/sozialdienst/benutzer";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateSozialdienstBenutzerOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /sozialdienst/benutzer
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /sozialdienst/benutzer
         * @param handler handler
         * @return SozialdienstBenutzerDtoSpec
         */
        public SozialdienstBenutzerDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<SozialdienstBenutzerDtoSpec> type = new TypeRef<SozialdienstBenutzerDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param sozialdienstBenutzerCreateDtoSpec (SozialdienstBenutzerCreateDtoSpec)  (optional)
         * @return operation
         */
        public CreateSozialdienstBenutzerOper body(SozialdienstBenutzerCreateDtoSpec sozialdienstBenutzerCreateDtoSpec) {
            reqSpec.setBody(sozialdienstBenutzerCreateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateSozialdienstBenutzerOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateSozialdienstBenutzerOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete a Sozialdienst by Id
     * 
     *
     * @see #sozialdienstIdPath  (required)
     * return SozialdienstDtoSpec
     */
    public static class DeleteSozialdienstOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/sozialdienst/{sozialdienstId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteSozialdienstOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /sozialdienst/{sozialdienstId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /sozialdienst/{sozialdienstId}
         * @param handler handler
         * @return SozialdienstDtoSpec
         */
        public SozialdienstDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<SozialdienstDtoSpec> type = new TypeRef<SozialdienstDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String SOZIALDIENST_ID_PATH = "sozialdienstId";

        /**
         * @param sozialdienstId (UUID)  (required)
         * @return operation
         */
        public DeleteSozialdienstOper sozialdienstIdPath(Object sozialdienstId) {
            reqSpec.addPathParam(SOZIALDIENST_ID_PATH, sozialdienstId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteSozialdienstOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteSozialdienstOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * update an exisitng SozialdienstBenutzer
     *
     * @see #body  (optional)
     */
    public static class DeleteSozialdienstBenutzerOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/sozialdienst/benutzer";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteSozialdienstBenutzerOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /sozialdienst/benutzer
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param body (UUID)  (optional)
         * @return operation
         */
        public DeleteSozialdienstBenutzerOper body(UUID body) {
            reqSpec.setBody(body);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteSozialdienstBenutzerOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteSozialdienstBenutzerOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns all Sozialdienste
     * 
     *
     * return List&lt;SozialdienstDtoSpec&gt;
     */
    public static class GetAllSozialdiensteOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/sozialdienst";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAllSozialdiensteOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /sozialdienst
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /sozialdienst
         * @param handler handler
         * @return List&lt;SozialdienstDtoSpec&gt;
         */
        public List<SozialdienstDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<SozialdienstDtoSpec>> type = new TypeRef<List<SozialdienstDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAllSozialdiensteOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAllSozialdiensteOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return List&lt;SozialdienstSlimDtoSpec&gt;
     */
    public static class GetAllSozialdiensteSlimOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/sozialdienst/gs";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAllSozialdiensteSlimOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /sozialdienst/gs
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /sozialdienst/gs
         * @param handler handler
         * @return List&lt;SozialdienstSlimDtoSpec&gt;
         */
        public List<SozialdienstSlimDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<SozialdienstSlimDtoSpec>> type = new TypeRef<List<SozialdienstSlimDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAllSozialdiensteSlimOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAllSozialdiensteSlimOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get a Sozialdienst by Id
     * 
     *
     * @see #sozialdienstIdPath  (required)
     * return SozialdienstDtoSpec
     */
    public static class GetSozialdienstOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/sozialdienst/{sozialdienstId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetSozialdienstOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /sozialdienst/{sozialdienstId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /sozialdienst/{sozialdienstId}
         * @param handler handler
         * @return SozialdienstDtoSpec
         */
        public SozialdienstDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<SozialdienstDtoSpec> type = new TypeRef<SozialdienstDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String SOZIALDIENST_ID_PATH = "sozialdienstId";

        /**
         * @param sozialdienstId (UUID)  (required)
         * @return operation
         */
        public GetSozialdienstOper sozialdienstIdPath(Object sozialdienstId) {
            reqSpec.addPathParam(SOZIALDIENST_ID_PATH, sozialdienstId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetSozialdienstOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetSozialdienstOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return List&lt;SozialdienstBenutzerDtoSpec&gt;
     */
    public static class GetSozialdienstBenutzerOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/sozialdienst/benutzer";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetSozialdienstBenutzerOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /sozialdienst/benutzer
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /sozialdienst/benutzer
         * @param handler handler
         * @return List&lt;SozialdienstBenutzerDtoSpec&gt;
         */
        public List<SozialdienstBenutzerDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<SozialdienstBenutzerDtoSpec>> type = new TypeRef<List<SozialdienstBenutzerDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetSozialdienstBenutzerOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetSozialdienstBenutzerOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #sozialdienstIdPath  (required)
     * @see #body  (optional)
     * return SozialdienstBenutzerDtoSpec
     */
    public static class ReplaceSozialdienstAdminOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/sozialdienst/{sozialdienstId}/replaceSozialdienstAdmin";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ReplaceSozialdienstAdminOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /sozialdienst/{sozialdienstId}/replaceSozialdienstAdmin
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /sozialdienst/{sozialdienstId}/replaceSozialdienstAdmin
         * @param handler handler
         * @return SozialdienstBenutzerDtoSpec
         */
        public SozialdienstBenutzerDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<SozialdienstBenutzerDtoSpec> type = new TypeRef<SozialdienstBenutzerDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param sozialdienstAdminDtoSpec (SozialdienstAdminDtoSpec)  (optional)
         * @return operation
         */
        public ReplaceSozialdienstAdminOper body(SozialdienstAdminDtoSpec sozialdienstAdminDtoSpec) {
            reqSpec.setBody(sozialdienstAdminDtoSpec);
            return this;
        }

        public static final String SOZIALDIENST_ID_PATH = "sozialdienstId";

        /**
         * @param sozialdienstId (UUID)  (required)
         * @return operation
         */
        public ReplaceSozialdienstAdminOper sozialdienstIdPath(Object sozialdienstId) {
            reqSpec.addPathParam(SOZIALDIENST_ID_PATH, sozialdienstId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ReplaceSozialdienstAdminOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ReplaceSozialdienstAdminOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update a Sozialdienst
     * 
     *
     * @see #body  (optional)
     * return SozialdienstDtoSpec
     */
    public static class UpdateSozialdienstOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/sozialdienst";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateSozialdienstOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /sozialdienst
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /sozialdienst
         * @param handler handler
         * @return SozialdienstDtoSpec
         */
        public SozialdienstDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<SozialdienstDtoSpec> type = new TypeRef<SozialdienstDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param sozialdienstUpdateDtoSpec (SozialdienstUpdateDtoSpec)  (optional)
         * @return operation
         */
        public UpdateSozialdienstOper body(SozialdienstUpdateDtoSpec sozialdienstUpdateDtoSpec) {
            reqSpec.setBody(sozialdienstUpdateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateSozialdienstOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateSozialdienstOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #sozialdienstIdPath  (required)
     * @see #body  (optional)
     * return SozialdienstBenutzerDtoSpec
     */
    public static class UpdateSozialdienstAdminOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/sozialdienst/{sozialdienstId}/updateSozialdienstAdmin";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateSozialdienstAdminOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /sozialdienst/{sozialdienstId}/updateSozialdienstAdmin
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /sozialdienst/{sozialdienstId}/updateSozialdienstAdmin
         * @param handler handler
         * @return SozialdienstBenutzerDtoSpec
         */
        public SozialdienstBenutzerDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<SozialdienstBenutzerDtoSpec> type = new TypeRef<SozialdienstBenutzerDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param sozialdienstAdminUpdateDtoSpec (SozialdienstAdminUpdateDtoSpec)  (optional)
         * @return operation
         */
        public UpdateSozialdienstAdminOper body(SozialdienstAdminUpdateDtoSpec sozialdienstAdminUpdateDtoSpec) {
            reqSpec.setBody(sozialdienstAdminUpdateDtoSpec);
            return this;
        }

        public static final String SOZIALDIENST_ID_PATH = "sozialdienstId";

        /**
         * @param sozialdienstId (UUID)  (required)
         * @return operation
         */
        public UpdateSozialdienstAdminOper sozialdienstIdPath(Object sozialdienstId) {
            reqSpec.addPathParam(SOZIALDIENST_ID_PATH, sozialdienstId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateSozialdienstAdminOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateSozialdienstAdminOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * update an exisitng SozialdienstBenutzer
     *
     * @see #body  (optional)
     * return SozialdienstBenutzerDtoSpec
     */
    public static class UpdateSozialdienstBenutzerOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/sozialdienst/benutzer";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateSozialdienstBenutzerOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /sozialdienst/benutzer
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /sozialdienst/benutzer
         * @param handler handler
         * @return SozialdienstBenutzerDtoSpec
         */
        public SozialdienstBenutzerDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<SozialdienstBenutzerDtoSpec> type = new TypeRef<SozialdienstBenutzerDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param sozialdienstBenutzerUpdateDtoSpec (SozialdienstBenutzerUpdateDtoSpec)  (optional)
         * @return operation
         */
        public UpdateSozialdienstBenutzerOper body(SozialdienstBenutzerUpdateDtoSpec sozialdienstBenutzerUpdateDtoSpec) {
            reqSpec.setBody(sozialdienstBenutzerUpdateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateSozialdienstBenutzerOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateSozialdienstBenutzerOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
