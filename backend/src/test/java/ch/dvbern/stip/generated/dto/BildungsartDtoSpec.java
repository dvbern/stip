/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * 
 */
@JsonPropertyOrder({
  BildungsartDtoSpec.JSON_PROPERTY_BESCHREIBUNG,
  BildungsartDtoSpec.JSON_PROPERTY_BILDUNGSSTUFE,
  BildungsartDtoSpec.JSON_PROPERTY_BFS
})
@JsonTypeName("Bildungsart")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BildungsartDtoSpec {
  public static final String JSON_PROPERTY_BESCHREIBUNG = "beschreibung";
  private String beschreibung;

  public static final String JSON_PROPERTY_BILDUNGSSTUFE = "bildungsstufe";
  private String bildungsstufe;

  public static final String JSON_PROPERTY_BFS = "bfs";
  private Integer bfs;

  public BildungsartDtoSpec() {
  }

  public BildungsartDtoSpec beschreibung(String beschreibung) {
    
    this.beschreibung = beschreibung;
    return this;
  }

   /**
   * Get beschreibung
   * @return beschreibung
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BESCHREIBUNG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBeschreibung() {
    return beschreibung;
  }


  @JsonProperty(JSON_PROPERTY_BESCHREIBUNG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBeschreibung(String beschreibung) {
    this.beschreibung = beschreibung;
  }


  public BildungsartDtoSpec bildungsstufe(String bildungsstufe) {
    
    this.bildungsstufe = bildungsstufe;
    return this;
  }

   /**
   * Get bildungsstufe
   * @return bildungsstufe
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BILDUNGSSTUFE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBildungsstufe() {
    return bildungsstufe;
  }


  @JsonProperty(JSON_PROPERTY_BILDUNGSSTUFE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBildungsstufe(String bildungsstufe) {
    this.bildungsstufe = bildungsstufe;
  }


  public BildungsartDtoSpec bfs(Integer bfs) {
    
    this.bfs = bfs;
    return this;
  }

   /**
   * Get bfs
   * @return bfs
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BFS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBfs() {
    return bfs;
  }


  @JsonProperty(JSON_PROPERTY_BFS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBfs(Integer bfs) {
    this.bfs = bfs;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BildungsartDtoSpec bildungsart = (BildungsartDtoSpec) o;
    return Objects.equals(this.beschreibung, bildungsart.beschreibung) &&
        Objects.equals(this.bildungsstufe, bildungsart.bildungsstufe) &&
        Objects.equals(this.bfs, bildungsart.bfs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beschreibung, bildungsstufe, bfs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BildungsartDtoSpec {\n");
    sb.append("    beschreibung: ").append(toIndentedString(beschreibung)).append("\n");
    sb.append("    bildungsstufe: ").append(toIndentedString(bildungsstufe)).append("\n");
    sb.append("    bfs: ").append(toIndentedString(bfs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

