/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.dto;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DeploymentConfigDtoSpec
 */
@JsonPropertyOrder({
  DeploymentConfigDtoSpec.JSON_PROPERTY_ENVIRONMENT,
  DeploymentConfigDtoSpec.JSON_PROPERTY_VERSION,
  DeploymentConfigDtoSpec.JSON_PROPERTY_ALLOWED_MIME_TYPES
})
@JsonTypeName("DeploymentConfig")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DeploymentConfigDtoSpec {
  public static final String JSON_PROPERTY_ENVIRONMENT = "environment";
  private String environment;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_ALLOWED_MIME_TYPES = "allowedMimeTypes";
  private List<String> allowedMimeTypes;

  public DeploymentConfigDtoSpec() {
  }

  public DeploymentConfigDtoSpec environment(String environment) {

    this.environment = environment;
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnvironment() {
    return environment;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnvironment(String environment) {
    this.environment = environment;
  }


  public DeploymentConfigDtoSpec version(String version) {

    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  public DeploymentConfigDtoSpec allowedMimeTypes(List<String> allowedMimeTypes) {

    this.allowedMimeTypes = allowedMimeTypes;
    return this;
  }

  public DeploymentConfigDtoSpec addAllowedMimeTypesItem(String allowedMimeTypesItem) {
    if (this.allowedMimeTypes == null) {
      this.allowedMimeTypes = new ArrayList<>();
    }
    this.allowedMimeTypes.add(allowedMimeTypesItem);
    return this;
  }

   /**
   *
   * @return allowedMimeTypes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOWED_MIME_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAllowedMimeTypes() {
    return allowedMimeTypes;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_MIME_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedMimeTypes(List<String> allowedMimeTypes) {
    this.allowedMimeTypes = allowedMimeTypes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentConfigDtoSpec deploymentConfig = (DeploymentConfigDtoSpec) o;
    return Objects.equals(this.environment, deploymentConfig.environment) &&
        Objects.equals(this.version, deploymentConfig.version) &&
        Objects.equals(this.allowedMimeTypes, deploymentConfig.allowedMimeTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environment, version, allowedMimeTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentConfigDtoSpec {\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    allowedMimeTypes: ").append(toIndentedString(allowedMimeTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

