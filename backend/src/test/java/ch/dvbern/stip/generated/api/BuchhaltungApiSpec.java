/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.BuchhaltungEntryDtoSpec;
import ch.dvbern.stip.generated.dto.BuchhaltungOverviewDtoSpec;
import ch.dvbern.stip.generated.dto.BuchhaltungSaldokorrekturDtoSpec;
import ch.dvbern.stip.generated.dto.PaginatedFailedAuszahlungBuchhaltungDtoSpec;
import java.util.UUID;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class BuchhaltungApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private BuchhaltungApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static BuchhaltungApiSpec buchhaltung(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new BuchhaltungApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createBuchhaltungSaldokorrektur(),
                getBuchhaltungEntrys(),
                getFailedAuszahlungBuchhaltungEntrys(),
                retryFailedAuszahlungBuchhaltungForGesuch()
        );
    }

    public CreateBuchhaltungSaldokorrekturOper createBuchhaltungSaldokorrektur() {
        return new CreateBuchhaltungSaldokorrekturOper(createReqSpec());
    }

    public GetBuchhaltungEntrysOper getBuchhaltungEntrys() {
        return new GetBuchhaltungEntrysOper(createReqSpec());
    }

    public GetFailedAuszahlungBuchhaltungEntrysOper getFailedAuszahlungBuchhaltungEntrys() {
        return new GetFailedAuszahlungBuchhaltungEntrysOper(createReqSpec());
    }

    public RetryFailedAuszahlungBuchhaltungForGesuchOper retryFailedAuszahlungBuchhaltungForGesuch() {
        return new RetryFailedAuszahlungBuchhaltungForGesuchOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public BuchhaltungApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Create a buchhaltungsentry from a saldokorrektur
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * @see #body  (required)
     * return BuchhaltungEntryDtoSpec
     */
    public static class CreateBuchhaltungSaldokorrekturOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/buchhaltung/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateBuchhaltungSaldokorrekturOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /buchhaltung/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /buchhaltung/{gesuchId}
         * @param handler handler
         * @return BuchhaltungEntryDtoSpec
         */
        public BuchhaltungEntryDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<BuchhaltungEntryDtoSpec> type = new TypeRef<BuchhaltungEntryDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param buchhaltungSaldokorrekturDtoSpec (BuchhaltungSaldokorrekturDtoSpec)  (required)
         * @return operation
         */
        public CreateBuchhaltungSaldokorrekturOper body(BuchhaltungSaldokorrekturDtoSpec buchhaltungSaldokorrekturDtoSpec) {
            reqSpec.setBody(buchhaltungSaldokorrekturDtoSpec);
            return this;
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public CreateBuchhaltungSaldokorrekturOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateBuchhaltungSaldokorrekturOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateBuchhaltungSaldokorrekturOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Gets all buchhaltungsentrys
     * 
     *
     * @see #gesuchIdPath Die ID vom Gesuch (required)
     * return BuchhaltungOverviewDtoSpec
     */
    public static class GetBuchhaltungEntrysOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/buchhaltung/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetBuchhaltungEntrysOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /buchhaltung/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /buchhaltung/{gesuchId}
         * @param handler handler
         * @return BuchhaltungOverviewDtoSpec
         */
        public BuchhaltungOverviewDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<BuchhaltungOverviewDtoSpec> type = new TypeRef<BuchhaltungOverviewDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID) Die ID vom Gesuch (required)
         * @return operation
         */
        public GetBuchhaltungEntrysOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetBuchhaltungEntrysOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetBuchhaltungEntrysOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returns all Auszahlungs buchhaltungsentrys that have thoroughly failed
     * 
     *
     * @see #pageQuery  (required)
     * @see #pageSizeQuery  (required)
     * return PaginatedFailedAuszahlungBuchhaltungDtoSpec
     */
    public static class GetFailedAuszahlungBuchhaltungEntrysOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/buchhaltung/failed";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetFailedAuszahlungBuchhaltungEntrysOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /buchhaltung/failed
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /buchhaltung/failed
         * @param handler handler
         * @return PaginatedFailedAuszahlungBuchhaltungDtoSpec
         */
        public PaginatedFailedAuszahlungBuchhaltungDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<PaginatedFailedAuszahlungBuchhaltungDtoSpec> type = new TypeRef<PaginatedFailedAuszahlungBuchhaltungDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String PAGE_QUERY = "page";

        /**
         * @param page (Integer)  (required)
         * @return operation
         */
        public GetFailedAuszahlungBuchhaltungEntrysOper pageQuery(Object... page) {
            reqSpec.addQueryParam(PAGE_QUERY, page);
            return this;
        }

        public static final String PAGE_SIZE_QUERY = "pageSize";

        /**
         * @param pageSize (Integer)  (required)
         * @return operation
         */
        public GetFailedAuszahlungBuchhaltungEntrysOper pageSizeQuery(Object... pageSize) {
            reqSpec.addQueryParam(PAGE_SIZE_QUERY, pageSize);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetFailedAuszahlungBuchhaltungEntrysOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetFailedAuszahlungBuchhaltungEntrysOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * return BuchhaltungEntry for retry
     * 
     *
     * @see #gesuchIdPath  (required)
     * return BuchhaltungEntryDtoSpec
     */
    public static class RetryFailedAuszahlungBuchhaltungForGesuchOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/buchhaltung/retry/{gesuchId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public RetryFailedAuszahlungBuchhaltungForGesuchOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /buchhaltung/retry/{gesuchId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /buchhaltung/retry/{gesuchId}
         * @param handler handler
         * @return BuchhaltungEntryDtoSpec
         */
        public BuchhaltungEntryDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<BuchhaltungEntryDtoSpec> type = new TypeRef<BuchhaltungEntryDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCH_ID_PATH = "gesuchId";

        /**
         * @param gesuchId (UUID)  (required)
         * @return operation
         */
        public RetryFailedAuszahlungBuchhaltungForGesuchOper gesuchIdPath(Object gesuchId) {
            reqSpec.addPathParam(GESUCH_ID_PATH, gesuchId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public RetryFailedAuszahlungBuchhaltungForGesuchOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public RetryFailedAuszahlungBuchhaltungForGesuchOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
