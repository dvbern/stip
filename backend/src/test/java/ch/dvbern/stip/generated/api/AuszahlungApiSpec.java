/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.ChangeAuszahlungKreditorDtoSpec;
import ch.dvbern.stip.generated.dto.CreateAuszahlungDtoSpec;
import ch.dvbern.stip.generated.dto.CreateAuszahlungKreditorDtoSpec;
import ch.dvbern.stip.generated.dto.GetAuszahlungImportStatusResponseDtoSpec;
import ch.dvbern.stip.generated.dto.ValidationReportDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class AuszahlungApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private AuszahlungApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static AuszahlungApiSpec auszahlung(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new AuszahlungApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                changeKreditor(),
                createAuszahlung(),
                createKreditor(),
                getImportStatus()
        );
    }

    public ChangeKreditorOper changeKreditor() {
        return new ChangeKreditorOper(createReqSpec());
    }

    public CreateAuszahlungOper createAuszahlung() {
        return new CreateAuszahlungOper(createReqSpec());
    }

    public CreateKreditorOper createKreditor() {
        return new CreateKreditorOper(createReqSpec());
    }

    public GetImportStatusOper getImportStatus() {
        return new GetImportStatusOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public AuszahlungApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * change kreditor details in SAP
     * change kreditor details in SAP
     *
     * @see #body  (required)
     * return String
     */
    public static class ChangeKreditorOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/auszahlung/kreditor/change";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ChangeKreditorOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /auszahlung/kreditor/change
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /auszahlung/kreditor/change
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            TypeRef<String> type = new TypeRef<String>(){};
            return execute(handler).as(type);
        }

         /**
         * @param changeAuszahlungKreditorDtoSpec (ChangeAuszahlungKreditorDtoSpec)  (required)
         * @return operation
         */
        public ChangeKreditorOper body(ChangeAuszahlungKreditorDtoSpec changeAuszahlungKreditorDtoSpec) {
            reqSpec.setBody(changeAuszahlungKreditorDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ChangeKreditorOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ChangeKreditorOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * create a payment in SAP
     * create a payment in SAP
     *
     * @see #body  (required)
     * return String
     */
    public static class CreateAuszahlungOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/auszahlung/create";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateAuszahlungOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /auszahlung/create
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /auszahlung/create
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            TypeRef<String> type = new TypeRef<String>(){};
            return execute(handler).as(type);
        }

         /**
         * @param createAuszahlungDtoSpec (CreateAuszahlungDtoSpec)  (required)
         * @return operation
         */
        public CreateAuszahlungOper body(CreateAuszahlungDtoSpec createAuszahlungDtoSpec) {
            reqSpec.setBody(createAuszahlungDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateAuszahlungOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateAuszahlungOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Create a new kreditor in SAP
     * Create a new kreditor in SAP
     *
     * @see #body  (required)
     * return String
     */
    public static class CreateKreditorOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/auszahlung/kreditor/create";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateKreditorOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /auszahlung/kreditor/create
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /auszahlung/kreditor/create
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            TypeRef<String> type = new TypeRef<String>(){};
            return execute(handler).as(type);
        }

         /**
         * @param createAuszahlungKreditorDtoSpec (CreateAuszahlungKreditorDtoSpec)  (required)
         * @return operation
         */
        public CreateKreditorOper body(CreateAuszahlungKreditorDtoSpec createAuszahlungKreditorDtoSpec) {
            reqSpec.setBody(createAuszahlungKreditorDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateKreditorOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateKreditorOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get import status of a payment in SAP
     * Get import status of a payment in SAP
     *
     * @see #deliveryIdPath  (required)
     * return GetAuszahlungImportStatusResponseDtoSpec
     */
    public static class GetImportStatusOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/auszahlung/status/{deliveryId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetImportStatusOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /auszahlung/status/{deliveryId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /auszahlung/status/{deliveryId}
         * @param handler handler
         * @return GetAuszahlungImportStatusResponseDtoSpec
         */
        public GetAuszahlungImportStatusResponseDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GetAuszahlungImportStatusResponseDtoSpec> type = new TypeRef<GetAuszahlungImportStatusResponseDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String DELIVERY_ID_PATH = "deliveryId";

        /**
         * @param deliveryId (Integer)  (required)
         * @return operation
         */
        public GetImportStatusOper deliveryIdPath(Object deliveryId) {
            reqSpec.addPathParam(DELIVERY_ID_PATH, deliveryId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetImportStatusOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetImportStatusOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
