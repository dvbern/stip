/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.api;

import ch.dvbern.stip.generated.dto.GesuchsperiodeCreateDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchsperiodeDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchsperiodeUpdateDtoSpec;
import ch.dvbern.stip.generated.dto.GesuchsperiodeWithDatenDtoSpec;
import java.util.UUID;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class GesuchsperiodeApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private GesuchsperiodeApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static GesuchsperiodeApiSpec gesuchsperiode(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new GesuchsperiodeApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createGesuchsperiode(),
                getAktiveGesuchsperioden(),
                getGesuchsperiode(),
                getGesuchsperioden(),
                updateGesuchsperiode()
        );
    }

    public CreateGesuchsperiodeOper createGesuchsperiode() {
        return new CreateGesuchsperiodeOper(createReqSpec());
    }

    public GetAktiveGesuchsperiodenOper getAktiveGesuchsperioden() {
        return new GetAktiveGesuchsperiodenOper(createReqSpec());
    }

    public GetGesuchsperiodeOper getGesuchsperiode() {
        return new GetGesuchsperiodeOper(createReqSpec());
    }

    public GetGesuchsperiodenOper getGesuchsperioden() {
        return new GetGesuchsperiodenOper(createReqSpec());
    }

    public UpdateGesuchsperiodeOper updateGesuchsperiode() {
        return new UpdateGesuchsperiodeOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public GesuchsperiodeApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * @see #body  (required)
     * return List&lt;GesuchsperiodeWithDatenDtoSpec&gt;
     */
    public static class CreateGesuchsperiodeOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/gesuchsperiode";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateGesuchsperiodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /gesuchsperiode
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /gesuchsperiode
         * @param handler handler
         * @return List&lt;GesuchsperiodeWithDatenDtoSpec&gt;
         */
        public List<GesuchsperiodeWithDatenDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchsperiodeWithDatenDtoSpec>> type = new TypeRef<List<GesuchsperiodeWithDatenDtoSpec>>(){};
            return execute(handler).as(type);
        }

         /**
         * @param gesuchsperiodeCreateDtoSpec (GesuchsperiodeCreateDtoSpec)  (required)
         * @return operation
         */
        public CreateGesuchsperiodeOper body(GesuchsperiodeCreateDtoSpec gesuchsperiodeCreateDtoSpec) {
            reqSpec.setBody(gesuchsperiodeCreateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateGesuchsperiodeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateGesuchsperiodeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all active Gesuchsperioden
     * 
     *
     * return List&lt;GesuchsperiodeDtoSpec&gt;
     */
    public static class GetAktiveGesuchsperiodenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchsperiode/aktive";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAktiveGesuchsperiodenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchsperiode/aktive
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchsperiode/aktive
         * @param handler handler
         * @return List&lt;GesuchsperiodeDtoSpec&gt;
         */
        public List<GesuchsperiodeDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchsperiodeDtoSpec>> type = new TypeRef<List<GesuchsperiodeDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAktiveGesuchsperiodenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAktiveGesuchsperiodenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Returniert die GesuchsperiodeWithDaten mit der gegebene Id.
     * 
     *
     * @see #gesuchsperiodeIdPath  (required)
     * return GesuchsperiodeWithDatenDtoSpec
     */
    public static class GetGesuchsperiodeOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchsperiode/{gesuchsperiodeId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchsperiodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchsperiode/{gesuchsperiodeId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchsperiode/{gesuchsperiodeId}
         * @param handler handler
         * @return GesuchsperiodeWithDatenDtoSpec
         */
        public GesuchsperiodeWithDatenDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchsperiodeWithDatenDtoSpec> type = new TypeRef<GesuchsperiodeWithDatenDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String GESUCHSPERIODE_ID_PATH = "gesuchsperiodeId";

        /**
         * @param gesuchsperiodeId (UUID)  (required)
         * @return operation
         */
        public GetGesuchsperiodeOper gesuchsperiodeIdPath(Object gesuchsperiodeId) {
            reqSpec.addPathParam(GESUCHSPERIODE_ID_PATH, gesuchsperiodeId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchsperiodeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchsperiodeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return List&lt;GesuchsperiodeDtoSpec&gt;
     */
    public static class GetGesuchsperiodenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/gesuchsperiode";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetGesuchsperiodenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /gesuchsperiode
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /gesuchsperiode
         * @param handler handler
         * @return List&lt;GesuchsperiodeDtoSpec&gt;
         */
        public List<GesuchsperiodeDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<GesuchsperiodeDtoSpec>> type = new TypeRef<List<GesuchsperiodeDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetGesuchsperiodenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetGesuchsperiodenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Updates a Gesuchperiode with the given id
     * 
     *
     * @see #gesuchsperiodeIdPath  (required)
     * @see #body  (optional)
     * return GesuchsperiodeWithDatenDtoSpec
     */
    public static class UpdateGesuchsperiodeOper implements Oper {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/gesuchsperiode/{gesuchsperiodeId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateGesuchsperiodeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /gesuchsperiode/{gesuchsperiodeId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /gesuchsperiode/{gesuchsperiodeId}
         * @param handler handler
         * @return GesuchsperiodeWithDatenDtoSpec
         */
        public GesuchsperiodeWithDatenDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<GesuchsperiodeWithDatenDtoSpec> type = new TypeRef<GesuchsperiodeWithDatenDtoSpec>(){};
            return execute(handler).as(type);
        }

         /**
         * @param gesuchsperiodeUpdateDtoSpec (GesuchsperiodeUpdateDtoSpec)  (optional)
         * @return operation
         */
        public UpdateGesuchsperiodeOper body(GesuchsperiodeUpdateDtoSpec gesuchsperiodeUpdateDtoSpec) {
            reqSpec.setBody(gesuchsperiodeUpdateDtoSpec);
            return this;
        }

        public static final String GESUCHSPERIODE_ID_PATH = "gesuchsperiodeId";

        /**
         * @param gesuchsperiodeId (UUID)  (required)
         * @return operation
         */
        public UpdateGesuchsperiodeOper gesuchsperiodeIdPath(Object gesuchsperiodeId) {
            reqSpec.addPathParam(GESUCHSPERIODE_ID_PATH, gesuchsperiodeId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateGesuchsperiodeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateGesuchsperiodeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
