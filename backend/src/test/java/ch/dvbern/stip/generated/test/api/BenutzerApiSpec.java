/*
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.dvbern.stip.generated.test.api;

import ch.dvbern.stip.generated.test.dto.BenutzerDtoSpec;
import ch.dvbern.stip.generated.test.dto.BenutzerUpdateDtoSpec;
import ch.dvbern.stip.generated.test.dto.SachbearbeiterZuordnungStammdatenDtoSpec;
import java.util.UUID;
import ch.dvbern.stip.generated.test.dto.ValidationReportDtoSpec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.common.mapper.TypeRef;
import io.restassured.http.Method;
import io.restassured.response.Response;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import static io.restassured.http.Method.*;

public class BenutzerApiSpec {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private BenutzerApiSpec(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static BenutzerApiSpec benutzer(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new BenutzerApiSpec(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                createOrUpdateSachbearbeiterStammdaten(),
                getCurrentBenutzer(),
                getSachbearbeitende(),
                getSachbearbeiterStammdaten(),
                updateCurrentBenutzer()
        );
    }

    public CreateOrUpdateSachbearbeiterStammdatenOper createOrUpdateSachbearbeiterStammdaten() {
        return new CreateOrUpdateSachbearbeiterStammdatenOper(createReqSpec());
    }

    public GetCurrentBenutzerOper getCurrentBenutzer() {
        return new GetCurrentBenutzerOper(createReqSpec());
    }

    public GetSachbearbeitendeOper getSachbearbeitende() {
        return new GetSachbearbeitendeOper(createReqSpec());
    }

    public GetSachbearbeiterStammdatenOper getSachbearbeiterStammdaten() {
        return new GetSachbearbeiterStammdatenOper(createReqSpec());
    }

    public UpdateCurrentBenutzerOper updateCurrentBenutzer() {
        return new UpdateCurrentBenutzerOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public BenutzerApiSpec reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * 
     * 
     *
     * @see #benutzerIdPath  (required)
     * @see #body  (required)
     */
    public static class CreateOrUpdateSachbearbeiterStammdatenOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/benutzer/stammdaten/sachbearbeiter/{benutzerId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateOrUpdateSachbearbeiterStammdatenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("text/plain");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /benutzer/stammdaten/sachbearbeiter/{benutzerId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param sachbearbeiterZuordnungStammdatenDtoSpec (SachbearbeiterZuordnungStammdatenDtoSpec)  (required)
         * @return operation
         */
        public CreateOrUpdateSachbearbeiterStammdatenOper body(SachbearbeiterZuordnungStammdatenDtoSpec sachbearbeiterZuordnungStammdatenDtoSpec) {
            reqSpec.setBody(sachbearbeiterZuordnungStammdatenDtoSpec);
            return this;
        }

        public static final String BENUTZER_ID_PATH = "benutzerId";

        /**
         * @param benutzerId (UUID)  (required)
         * @return operation
         */
        public CreateOrUpdateSachbearbeiterStammdatenOper benutzerIdPath(Object benutzerId) {
            reqSpec.addPathParam(BENUTZER_ID_PATH, benutzerId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateOrUpdateSachbearbeiterStammdatenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateOrUpdateSachbearbeiterStammdatenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get the logged-in Benutzer
     * 
     *
     * return BenutzerDtoSpec
     */
    public static class GetCurrentBenutzerOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/benutzer/me";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCurrentBenutzerOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /benutzer/me
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /benutzer/me
         * @param handler handler
         * @return BenutzerDtoSpec
         */
        public BenutzerDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<BenutzerDtoSpec> type = new TypeRef<BenutzerDtoSpec>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCurrentBenutzerOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCurrentBenutzerOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * return List&lt;BenutzerDtoSpec&gt;
     */
    public static class GetSachbearbeitendeOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/benutzer/stammdaten/sachbearbeiter";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetSachbearbeitendeOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /benutzer/stammdaten/sachbearbeiter
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /benutzer/stammdaten/sachbearbeiter
         * @param handler handler
         * @return List&lt;BenutzerDtoSpec&gt;
         */
        public List<BenutzerDtoSpec> executeAs(Function<Response, Response> handler) {
            TypeRef<List<BenutzerDtoSpec>> type = new TypeRef<List<BenutzerDtoSpec>>(){};
            return execute(handler).as(type);
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetSachbearbeitendeOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetSachbearbeitendeOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * 
     * 
     *
     * @see #benutzerIdPath  (required)
     * return SachbearbeiterZuordnungStammdatenDtoSpec
     */
    public static class GetSachbearbeiterStammdatenOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/benutzer/stammdaten/sachbearbeiter/{benutzerId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetSachbearbeiterStammdatenOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /benutzer/stammdaten/sachbearbeiter/{benutzerId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /benutzer/stammdaten/sachbearbeiter/{benutzerId}
         * @param handler handler
         * @return SachbearbeiterZuordnungStammdatenDtoSpec
         */
        public SachbearbeiterZuordnungStammdatenDtoSpec executeAs(Function<Response, Response> handler) {
            TypeRef<SachbearbeiterZuordnungStammdatenDtoSpec> type = new TypeRef<SachbearbeiterZuordnungStammdatenDtoSpec>(){};
            return execute(handler).as(type);
        }

        public static final String BENUTZER_ID_PATH = "benutzerId";

        /**
         * @param benutzerId (UUID)  (required)
         * @return operation
         */
        public GetSachbearbeiterStammdatenOper benutzerIdPath(Object benutzerId) {
            reqSpec.addPathParam(BENUTZER_ID_PATH, benutzerId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetSachbearbeiterStammdatenOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetSachbearbeiterStammdatenOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update the logged-in Benutzer
     * 
     *
     * @see #body  (required)
     */
    public static class UpdateCurrentBenutzerOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/benutzer/me";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateCurrentBenutzerOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /benutzer/me
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param benutzerUpdateDtoSpec (BenutzerUpdateDtoSpec)  (required)
         * @return operation
         */
        public UpdateCurrentBenutzerOper body(BenutzerUpdateDtoSpec benutzerUpdateDtoSpec) {
            reqSpec.setBody(benutzerUpdateDtoSpec);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateCurrentBenutzerOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateCurrentBenutzerOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
