stages: [test, build, e2e, mirror, deploy, review-e2e]

variables:
  ARGOCD_APP: stip
  ARGOCD_IMAGES: api,gesuch-app,sachbearbeitung-app
  STIP_OVERLAYS_DIR: manifests/stip/overlays

backend:
  stage: build
  trigger:
    include: backend/.gitlab-ci.yml
    strategy: depend

frontend:
  stage: build
  trigger:
    include: frontend/.gitlab-ci.yml
    strategy: depend

include:
  - component: "gitlab.dvbern.ch/components/setup/workflow@1.3.0"
    inputs:
      mr-version: "${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"

  - component: 'gitlab.dvbern.ch/components/deploy/argocd-helm@1.3.0'
    inputs:
      name: 'deploy:dev'
      deployment-environment: 'dev'
      deployment-environment-url: 'https://dev-stip.$DVB_OCP_MERCURY_ROUTER'
      deployment-environment-values-path: 'charts/stip/environments/dev/values.yaml'
      deployment-on: 'default'
      deployment-mode: 'on_success'
      argocd-server: '$ARGOCD_SERVER'
      argocd-token: '$ARGOCD_TOKEN'
      argocd-app-name: '$ARGOCD_APP'

  - component: 'gitlab.dvbern.ch/components/deploy/argocd-helm@1.3.0'
    inputs:
      name: 'deploy:uat'
      deployment-environment: 'uat'
      deployment-environment-url: 'https://uat-stip.kibon.ch'
      deployment-environment-values-path: 'charts/stip/environments/uat/values.yaml'
      deployment-on: 'tag'
      deployment-mode: 'manual'
      argocd-server: '$ARGOCD_SERVER'
      argocd-token: '$ARGOCD_TOKEN'
      argocd-app-name: '$ARGOCD_APP'

  - component: 'gitlab.dvbern.ch/components/deploy/argocd-helm@1.3.0'
    inputs:
      name: 'deploy:prod'
      deployment-environment: 'prod'
      deployment-environment-url: 'https://stip.kibon.ch'
      deployment-environment-values-path: 'charts/stip/environments/prod/values.yaml'
      deployment-on: 'tag'
      deployment-mode: 'manual'
      argocd-server: '$ARGOCD_SERVER'
      argocd-token: '$ARGOCD_TOKEN'
      argocd-app-name: '$ARGOCD_APP'

  - component: 'gitlab.dvbern.ch/devops/gitlab/components/argocd-review-app@v0.8.0'
    inputs:
      review-app-url: 'https://${CI_COMMIT_REF_SLUG}-stip.$DVB_OCP_MERCURY_ROUTER'

  - component: 'gitlab.dvbern.ch/devops/gitlab/components/github-mirror@v0.8.0'
    inputs:
      git-mirror-clone-token: '$GITLAB_STIP_PULL_TOKEN'
      git-mirror-target: 'dvbern/stip'
      mirror-on: 'tag'
      mirror-when: 'always'

  - component: 'gitlab.dvbern.ch/components/build/nx@1.5.0'
    inputs:
      name: '.nx'
      e2e-test-package-version: '13.6.2'
      context-dir: 'frontend'
      e2e-test-image: docker-registry.dvbern.ch/microsoft/playwright
      e2e-test-image-version: v1.41.1-jammy
      install-e2e-test-package: false
      e2e-artifacts-dir: 'dist/.playwright/'
      e2e-on: 'default'

.install-argocd:
  tags: ['zone:tz', 'os:linux', 'type:docker']
  image:
    name: docker-registry.dvbern.ch/devops/docker/tools/k8s/main
    entrypoint: ['']
  variables:
    ARGOCD_SERVER: '$ARGOCD_SERVER'
    ARGOCD_AUTH_TOKEN: '$ARGOCD_TOKEN'
  before_script:
    - |
      echo "Using ArgoCD Server at $ARGOCD_SERVER"
      curl -ksSL -o /usr/local/bin/argocd https://$ARGOCD_SERVER/download/argocd-linux-amd64

start-e2e:
  stage: e2e
  resource_group: 'argocd:dev'
  extends: .install-argocd
  script:
    - argocd app sync stip-e2e --insecure
    - argocd app set stip-e2e --helm-set image.tag=$VERSION --insecure
    - argocd app set stip-e2e --helm-set api.replicaCount=1 --insecure
    - argocd app set stip-e2e --helm-set gesuchApp.replicaCount=1 --insecure
    - argocd app set stip-e2e --helm-set sachbearbeitungApp.replicaCount=1 --insecure
    - argocd app set stip-e2e --helm-set postgres-cluster.enabled=true --insecure
    - argocd app sync stip-e2e --insecure
    - argocd app wait stip-e2e --insecure
  environment:
    name: e2e
    url: 'https://e2e-stip.$DVB_OCP_MERCURY_ROUTER'
    action: start
  rules:
    - if: $CI_COMMIT_MESSAGE ~= /\[skip e2e\]/
      when: never
    - if: $PIPELINE_TYPE == "default"
      when: on_success
  allow_failure: true

run-e2e:
  stage: e2e
  extends: .nx-e2e-test
  resource_group: 'e2e'
  variables:
    E2E_BASEURL_GS: 'https://e2e-stip.$DVB_OCP_MERCURY_ROUTER'
    E2E_BASEURL_SB: 'https://e2e-sb-stip.$DVB_OCP_MERCURY_ROUTER'
  needs:
    - start-e2e
  allow_failure: true
  rules:
    - if: $CI_COMMIT_MESSAGE ~= /\[skip e2e\]/
      when: never

wait-for-review:
  tags: [ "zone:tz", "os:linux", "type:docker" ]
  image:
    name: '${DVB_DOCKER_REGISTRY}/dockerhub/alpine/curl'
    entrypoint: ['']
  stage: review-e2e
  needs:
    - argocd:review-app:start
  script: |
    curl --insecure \
    --max-time $REVIEW_MAX_TIME \
    --retry $REVIEW_RETRY \
    --retry-delay $REVIEW_RETRY_DELAY \
    --retry-max-time $REVIEW_RETRY_MAX_TIME \
    https://${CI_COMMIT_REF_SLUG}-stip.apps.mercury.ocp.dvbern.ch/q/health
  environment:
    name: review/$CI_COMMIT_REF_SLUG
  rules:
    - if: $CI_MERGE_REQUEST_IID

run-review-e2e:
  extends: run-e2e
  stage: review-e2e
  needs:
    - wait-for-review
  variables:
    E2E_BASEURL_GS: 'https://$CI_COMMIT_REF_SLUG-stip.$DVB_OCP_MERCURY_ROUTER'
    E2E_BASEURL_SB: 'https://$CI_COMMIT_REF_SLUG-sb-stip.$DVB_OCP_MERCURY_ROUTER'
  rules:
    - if: $PIPELINE_TYPE == "mr"

stop-e2e:
  when: always
  stage: e2e
  needs:
    - run-e2e
  resource_group: 'argocd:dev'
  extends: .install-argocd
  script:
    - argocd app set stip-e2e --helm-set api.replicaCount=0 --insecure
    - argocd app set stip-e2e --helm-set gesuchApp.replicaCount=0 --insecure
    - argocd app set stip-e2e --helm-set sachbearbeitungApp.replicaCount=0 --insecure
    - argocd app set stip-e2e --helm-set postgres-cluster.enabled=false --insecure
    - argocd app sync stip-e2e --prune --insecure
    - argocd app wait stip-e2e --insecure
  environment:
    name: e2e
    url: 'https://e2e-stip.$DVB_OCP_MERCURY_ROUTER'
    action: stop
  rules:
    - if: $CI_COMMIT_MESSAGE ~= /\[skip e2e\]/
      when: never
    - if: $PIPELINE_TYPE == "default"
      when: always
  allow_failure: true

.set-replica-one:
  extends: .install-argocd
  stage: deploy
  script:
    - argocd app sync stip --insecure
    - argocd app set stip --helm-set image.tag=$VERSION --insecure
    - argocd app set stip --helm-set $REPLICA_PATH=1 --insecure
    - argocd app sync stip --insecure
    - argocd app wait stip --insecure

.db-clear:start:
  extends: .set-replica-one
  when: manual
  variables:
    REPLICA_PATH: 'dbClear.replicaCount'

db-clear:dev:start:
  extends: .db-clear:start
  environment:
    name: dev
  rules:
    - if: $PIPELINE_TYPE == 'default'

db-clear:uat:start:
  extends: .db-clear:start
  environment:
    name: uat
  rules:
    - if: $PIPELINE_TYPE == 'tag'

.set-replica-zero:
  extends: .install-argocd
  script:
    - argocd app sync stip --insecure
    - argocd app set stip --helm-set image.tag=$VERSION --insecure
    - argocd app set stip --helm-set $REPLICA_PATH=0 --insecure
    - argocd app sync stip --insecure
    - argocd app wait stip --insecure

.db-clear:stop:
  extends: .set-replica-one
  rules:
    - when: always
  variables:
    REPLICA_PATH: 'dbClear.replicaCount'

db-clear:dev:stop:
  extends: .db-clear:stop
  environment:
    name: dev
  needs:
    - db-clear:dev:start
  rules:
    - if: $PIPELINE_TYPE == 'default'

db-clear:uat:stop:
  extends: .db-clear:stop
  environment:
    name: uat
  needs:
    - db-clear:uat:start
  rules:
    - if: $PIPELINE_TYPE == 'tag'
