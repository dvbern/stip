stages: [build, validate, test, analyze, package, deploy, mirror]

include:
  - component: 'gitlab.dvbern.ch/devops/gitlab/components/workflow@5ee978eeededdc1275eb9f200743ba14dfaf2c30'

  - component: 'gitlab.dvbern.ch/devops/gitlab/components/nx@40350d1189b402e43516b4a06b36ae776faf4f91'
    inputs:
      app-name: '*-app'
      test-app-name: '*-app'
      context-dir: 'frontend'
      e2e-on: 'never'

  - component: 'gitlab.dvbern.ch/devops/gitlab/components/nx@40350d1189b402e43516b4a06b36ae776faf4f91'
    inputs:
      name: ".nx"
      context-dir: 'frontend'

  - component: 'gitlab.dvbern.ch/devops/gitlab/components/sonarqube@v0.1.4'
    inputs:
      sonar-scanner: cli
      context-dir: 'frontend'
      sonar-project-key: "$SONAR_PROJECT_KEY_FRONTEND"
      sonar-token: "$SONAR_TOKEN_FRONTEND"

  - component: 'gitlab.dvbern.ch/devops/gitlab/components/buildah@5ee978eeededdc1275eb9f200743ba14dfaf2c30'
    inputs:
      name: package:sachbearbeitung-app
      context-dir: frontend
      image-name: 'sachbearbeitung-app'
      version: '$VERSION'
      build-latest: 'false'
      build-args: |
        APP=sachbearbeitung-app

  - component: 'gitlab.dvbern.ch/devops/gitlab/components/buildah@5ee978eeededdc1275eb9f200743ba14dfaf2c30'
    inputs:
      name: package:gesuch-app
      context-dir: frontend
      image-name: 'gesuch-app'
      version: '$VERSION'
      build-latest: 'false'
      build-args: |
        APP=gesuch-app

  - component: 'gitlab.dvbern.ch/devops/gitlab/components/argocd-install@23fb5ca15e20adc66f4500cd855587afe1d24818'
    inputs:
      argocd-server: "$E2E_ARGOCD_SERVER"
      argocd-token: "$E2E_ARGOCD_TOKEN"

start_e2e:
  stage: test
  resource_group: "argocd:dev"
  extends: .install-argocd
  script:
    - argocd app sync stip-e2e --insecure
    - argocd app set stip-e2e --helm-set api.replicaCount=1 --insecure
    - argocd app set stip-e2e --helm-set gesuchApp.replicaCount=1 --insecure
    - argocd app set stip-e2e --helm-set sachbearbeitungApp.replicaCount=1 --insecure
    - argocd app set stip-e2e --helm-set postgres-cluster.enabled=true --insecure
    - argocd app sync stip-e2e --insecure
    - argocd app wait stip-e2e --insecure
  environment:
    name: e2e
    url: "https://e2e-stip.$DVB_OCP_MERCURY_ROUTER"
    action: start
  rules:
    - if: $PIPELINE_TYPE == "default"
      when: always

run_e2e:
  extends: .nx-e2e-test
  resource_group: "e2e"
  variables:
    E2E_USERNAME: $E2E_USERNAME
    E2E_PASSWORD: $E2E_PASSWORD
    E2E_BASEURL_GS: "e2e-stip.$DVB_OCP_MERCURY_ROUTER"
    E2E_BASEURL_SB: "e2e-sb-stip.$DVB_OCP_MERCURY_ROUTER"
  needs:
    - start_e2e

stop_e2e:
  # Always run, even if prerequisites failed
  when: always
  stage: test
  needs:
    - run_e2e
  resource_group: "argocd:dev"
  extends: .install-argocd
  script:
    - argocd app set stip-e2e --helm-set api.replicaCount=0 --insecure
    - argocd app set stip-e2e --helm-set gesuchApp.replicaCount=0 --insecure
    - argocd app set stip-e2e --helm-set sachbearbeitungApp.replicaCount=0 --insecure
    - argocd app set stip-e2e --helm-set postgres-cluster.enabled=false --insecure
    - argocd app sync stip-e2e --prune --insecure
    - argocd app wait stip-e2e
  environment:
    name: e2e
    url: "https://e2e-stip.$DVB_OCP_MERCURY_ROUTER"
    action: stop
  rules:
    - if: $PIPELINE_TYPE == "default"
      when: always
