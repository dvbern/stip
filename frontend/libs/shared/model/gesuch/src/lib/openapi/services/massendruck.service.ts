/**
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { FileDownloadToken } from '../model/fileDownloadToken';
import { GetGesucheSBQueryType } from '../model/getGesucheSBQueryType';
import { GetMassendruckJobQueryType } from '../model/getMassendruckJobQueryType';
import { MassendruckDatenschutzbrief } from '../model/massendruckDatenschutzbrief';
import { MassendruckJob } from '../model/massendruckJob';
import { MassendruckJobDetail } from '../model/massendruckJobDetail';
import { MassendruckJobSortColumn } from '../model/massendruckJobSortColumn';
import { MassendruckJobStatus } from '../model/massendruckJobStatus';
import { MassendruckJobTyp } from '../model/massendruckJobTyp';
import { MassendruckVerfuegung } from '../model/massendruckVerfuegung';
import { PaginatedMassendruckJob } from '../model/paginatedMassendruckJob';
import { SortOrder } from '../model/sortOrder';
import { ValidationReport } from '../model/validationReport';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


export interface MassendruckServiceCreateMassendruckJobForQueryTypeRequestParams {
    getGesucheSBQueryType: GetGesucheSBQueryType;
}

export interface MassendruckServiceDeleteMassendruckJobRequestParams {
    massendruckId: string;
}

export interface MassendruckServiceDownloadMassendruckDocumentRequestParams {
    token: string;
}

export interface MassendruckServiceGetAllMassendruckJobsRequestParams {
    getMassendruckJobs: GetMassendruckJobQueryType;
    userErstellt?: string;
    timestampErstellt?: string;
    massendruckJobStatus?: MassendruckJobStatus;
    massendruckJobTyp?: MassendruckJobTyp;
    sortColumn?: MassendruckJobSortColumn;
    sortOrder?: SortOrder;
    page: number;
    pageSize: number;
}

export interface MassendruckServiceGetMassendruckDownloadTokenRequestParams {
    massendruckId: string;
}

export interface MassendruckServiceGetMassendruckJobDetailRequestParams {
    massendruckJobId: string;
}

export interface MassendruckServiceMassendruckDatenschutzbriefVersendenRequestParams {
    massendruckDatenschutzbriefId: string;
}

export interface MassendruckServiceMassendruckVerfuegungVersendenRequestParams {
    massendruckVerfuegungId: string;
}

export interface MassendruckServiceRetryMassendruckJobRequestParams {
    massendruckId: string;
}


@Injectable({
  providedIn: 'root'
})
export class MassendruckService {

    protected basePath = '/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Create a Massendruck Job for the given query type
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public createMassendruckJobForQueryType$(requestParameters: MassendruckServiceCreateMassendruckJobForQueryTypeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<MassendruckJob>;
     public createMassendruckJobForQueryType$(requestParameters: MassendruckServiceCreateMassendruckJobForQueryTypeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpResponse<MassendruckJob>>;
     public createMassendruckJobForQueryType$(requestParameters: MassendruckServiceCreateMassendruckJobForQueryTypeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpEvent<MassendruckJob>>;
     public createMassendruckJobForQueryType$(requestParameters: MassendruckServiceCreateMassendruckJobForQueryTypeRequestParams, observe: 'body' | 'response' | 'events' = 'body', reportProgress = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<any> {
        const getGesucheSBQueryType = requestParameters.getGesucheSBQueryType;
        if (getGesucheSBQueryType === null || getGesucheSBQueryType === undefined) {
            throw new Error('Required parameter getGesucheSBQueryType was null or undefined when calling createMassendruckJobForQueryType$.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (auth-uat-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
        if (localVarCredential) {
            // using credentials
        }

        // authentication (auth-dev-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
        if (localVarCredential) {
            // using credentials
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        const localVarPath = `/massendruck/${this.configuration.encodeParam({name: "getGesucheSBQueryType", value: getGesucheSBQueryType, in: "path", style: "simple", explode: false, dataType: "GetGesucheSBQueryType", dataFormat: undefined})}/create`;
        return this.httpClient.request<MassendruckJob>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: <any>observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete failed Massendruck Job
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public deleteMassendruckJob$(requestParameters: MassendruckServiceDeleteMassendruckJobRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<any>;
     public deleteMassendruckJob$(requestParameters: MassendruckServiceDeleteMassendruckJobRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpResponse<any>>;
     public deleteMassendruckJob$(requestParameters: MassendruckServiceDeleteMassendruckJobRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpEvent<any>>;
     public deleteMassendruckJob$(requestParameters: MassendruckServiceDeleteMassendruckJobRequestParams, observe: 'body' | 'response' | 'events' = 'body', reportProgress = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<any> {
        const massendruckId = requestParameters.massendruckId;
        if (massendruckId === null || massendruckId === undefined) {
            throw new Error('Required parameter massendruckId was null or undefined when calling deleteMassendruckJob$.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (auth-uat-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
        if (localVarCredential) {
            // using credentials
        }

        // authentication (auth-dev-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
        if (localVarCredential) {
            // using credentials
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        const localVarPath = `/massendruck/${this.configuration.encodeParam({name: "massendruckId", value: massendruckId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/delete`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: <any>observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public downloadMassendruckDocument$(requestParameters: MassendruckServiceDownloadMassendruckDocumentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<Blob>;
     public downloadMassendruckDocument$(requestParameters: MassendruckServiceDownloadMassendruckDocumentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpResponse<Blob>>;
     public downloadMassendruckDocument$(requestParameters: MassendruckServiceDownloadMassendruckDocumentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpEvent<Blob>>;
     public downloadMassendruckDocument$(requestParameters: MassendruckServiceDownloadMassendruckDocumentRequestParams, observe: 'body' | 'response' | 'events' = 'body', reportProgress = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<any> {
        const token = requestParameters.token;
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling downloadMassendruckDocument$.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (token !== undefined && token !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>token, 'token');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (auth-uat-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
        if (localVarCredential) {
            // using credentials
        }

        // authentication (auth-dev-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
        if (localVarCredential) {
            // using credentials
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        const localVarPath = `/massendruck/download`;
        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: <any>observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all Massendruck Jobs
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public getAllMassendruckJobs$(requestParameters: MassendruckServiceGetAllMassendruckJobsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<PaginatedMassendruckJob>;
     public getAllMassendruckJobs$(requestParameters: MassendruckServiceGetAllMassendruckJobsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpResponse<PaginatedMassendruckJob>>;
     public getAllMassendruckJobs$(requestParameters: MassendruckServiceGetAllMassendruckJobsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpEvent<PaginatedMassendruckJob>>;
     public getAllMassendruckJobs$(requestParameters: MassendruckServiceGetAllMassendruckJobsRequestParams, observe: 'body' | 'response' | 'events' = 'body', reportProgress = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<any> {
        const getMassendruckJobs = requestParameters.getMassendruckJobs;
        if (getMassendruckJobs === null || getMassendruckJobs === undefined) {
            throw new Error('Required parameter getMassendruckJobs was null or undefined when calling getAllMassendruckJobs$.');
        }
        const userErstellt = requestParameters.userErstellt;
        const timestampErstellt = requestParameters.timestampErstellt;
        const massendruckJobStatus = requestParameters.massendruckJobStatus;
        const massendruckJobTyp = requestParameters.massendruckJobTyp;
        const sortColumn = requestParameters.sortColumn;
        const sortOrder = requestParameters.sortOrder;
        const page = requestParameters.page;
        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getAllMassendruckJobs$.');
        }
        const pageSize = requestParameters.pageSize;
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling getAllMassendruckJobs$.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (userErstellt !== undefined && userErstellt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userErstellt, 'userErstellt');
        }
        if (timestampErstellt !== undefined && timestampErstellt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timestampErstellt, 'timestampErstellt');
        }
        if (massendruckJobStatus !== undefined && massendruckJobStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>massendruckJobStatus, 'massendruckJobStatus');
        }
        if (massendruckJobTyp !== undefined && massendruckJobTyp !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>massendruckJobTyp, 'massendruckJobTyp');
        }
        if (sortColumn !== undefined && sortColumn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortColumn, 'sortColumn');
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (auth-uat-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
        if (localVarCredential) {
            // using credentials
        }

        // authentication (auth-dev-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
        if (localVarCredential) {
            // using credentials
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        const localVarPath = `/massendruck/${this.configuration.encodeParam({name: "getMassendruckJobs", value: getMassendruckJobs, in: "path", style: "simple", explode: false, dataType: "GetMassendruckJobQueryType", dataFormat: undefined})}`;
        return this.httpClient.request<PaginatedMassendruckJob>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: <any>observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get Token to downlaod Verfuegung
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public getMassendruckDownloadToken$(requestParameters: MassendruckServiceGetMassendruckDownloadTokenRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<FileDownloadToken>;
     public getMassendruckDownloadToken$(requestParameters: MassendruckServiceGetMassendruckDownloadTokenRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpResponse<FileDownloadToken>>;
     public getMassendruckDownloadToken$(requestParameters: MassendruckServiceGetMassendruckDownloadTokenRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpEvent<FileDownloadToken>>;
     public getMassendruckDownloadToken$(requestParameters: MassendruckServiceGetMassendruckDownloadTokenRequestParams, observe: 'body' | 'response' | 'events' = 'body', reportProgress = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<any> {
        const massendruckId = requestParameters.massendruckId;
        if (massendruckId === null || massendruckId === undefined) {
            throw new Error('Required parameter massendruckId was null or undefined when calling getMassendruckDownloadToken$.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (auth-uat-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
        if (localVarCredential) {
            // using credentials
        }

        // authentication (auth-dev-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
        if (localVarCredential) {
            // using credentials
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        const localVarPath = `/massendruck/${this.configuration.encodeParam({name: "massendruckId", value: massendruckId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/token`;
        return this.httpClient.request<FileDownloadToken>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: <any>observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a Massendruck Job for the given query type
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public getMassendruckJobDetail$(requestParameters: MassendruckServiceGetMassendruckJobDetailRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<MassendruckJobDetail>;
     public getMassendruckJobDetail$(requestParameters: MassendruckServiceGetMassendruckJobDetailRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpResponse<MassendruckJobDetail>>;
     public getMassendruckJobDetail$(requestParameters: MassendruckServiceGetMassendruckJobDetailRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpEvent<MassendruckJobDetail>>;
     public getMassendruckJobDetail$(requestParameters: MassendruckServiceGetMassendruckJobDetailRequestParams, observe: 'body' | 'response' | 'events' = 'body', reportProgress = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<any> {
        const massendruckJobId = requestParameters.massendruckJobId;
        if (massendruckJobId === null || massendruckJobId === undefined) {
            throw new Error('Required parameter massendruckJobId was null or undefined when calling getMassendruckJobDetail$.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (auth-uat-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
        if (localVarCredential) {
            // using credentials
        }

        // authentication (auth-dev-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
        if (localVarCredential) {
            // using credentials
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        const localVarPath = `/massendruck/detail/${this.configuration.encodeParam({name: "massendruckJobId", value: massendruckJobId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        return this.httpClient.request<MassendruckJobDetail>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: <any>observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Send a Massendruck Datenschutzbrief
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public massendruckDatenschutzbriefVersenden$(requestParameters: MassendruckServiceMassendruckDatenschutzbriefVersendenRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<MassendruckDatenschutzbrief>;
     public massendruckDatenschutzbriefVersenden$(requestParameters: MassendruckServiceMassendruckDatenschutzbriefVersendenRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpResponse<MassendruckDatenschutzbrief>>;
     public massendruckDatenschutzbriefVersenden$(requestParameters: MassendruckServiceMassendruckDatenschutzbriefVersendenRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpEvent<MassendruckDatenschutzbrief>>;
     public massendruckDatenschutzbriefVersenden$(requestParameters: MassendruckServiceMassendruckDatenschutzbriefVersendenRequestParams, observe: 'body' | 'response' | 'events' = 'body', reportProgress = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<any> {
        const massendruckDatenschutzbriefId = requestParameters.massendruckDatenschutzbriefId;
        if (massendruckDatenschutzbriefId === null || massendruckDatenschutzbriefId === undefined) {
            throw new Error('Required parameter massendruckDatenschutzbriefId was null or undefined when calling massendruckDatenschutzbriefVersenden$.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (auth-uat-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
        if (localVarCredential) {
            // using credentials
        }

        // authentication (auth-dev-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
        if (localVarCredential) {
            // using credentials
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        const localVarPath = `/massendruck/datenschutzbrief/versendet/${this.configuration.encodeParam({name: "massendruckDatenschutzbriefId", value: massendruckDatenschutzbriefId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        return this.httpClient.request<MassendruckDatenschutzbrief>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: <any>observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Send a Massendruck Verfuegung
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public massendruckVerfuegungVersenden$(requestParameters: MassendruckServiceMassendruckVerfuegungVersendenRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<MassendruckVerfuegung>;
     public massendruckVerfuegungVersenden$(requestParameters: MassendruckServiceMassendruckVerfuegungVersendenRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpResponse<MassendruckVerfuegung>>;
     public massendruckVerfuegungVersenden$(requestParameters: MassendruckServiceMassendruckVerfuegungVersendenRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpEvent<MassendruckVerfuegung>>;
     public massendruckVerfuegungVersenden$(requestParameters: MassendruckServiceMassendruckVerfuegungVersendenRequestParams, observe: 'body' | 'response' | 'events' = 'body', reportProgress = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<any> {
        const massendruckVerfuegungId = requestParameters.massendruckVerfuegungId;
        if (massendruckVerfuegungId === null || massendruckVerfuegungId === undefined) {
            throw new Error('Required parameter massendruckVerfuegungId was null or undefined when calling massendruckVerfuegungVersenden$.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (auth-uat-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
        if (localVarCredential) {
            // using credentials
        }

        // authentication (auth-dev-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
        if (localVarCredential) {
            // using credentials
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        const localVarPath = `/massendruck/verfuegung/versendet/${this.configuration.encodeParam({name: "massendruckVerfuegungId", value: massendruckVerfuegungId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        return this.httpClient.request<MassendruckVerfuegung>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: <any>observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete failed Massendruck Job
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public retryMassendruckJob$(requestParameters: MassendruckServiceRetryMassendruckJobRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<MassendruckJobDetail>;
     public retryMassendruckJob$(requestParameters: MassendruckServiceRetryMassendruckJobRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpResponse<MassendruckJobDetail>>;
     public retryMassendruckJob$(requestParameters: MassendruckServiceRetryMassendruckJobRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<HttpEvent<MassendruckJobDetail>>;
     public retryMassendruckJob$(requestParameters: MassendruckServiceRetryMassendruckJobRequestParams, observe: 'body' | 'response' | 'events' = 'body', reportProgress = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext}): Observable<any> {
        const massendruckId = requestParameters.massendruckId;
        if (massendruckId === null || massendruckId === undefined) {
            throw new Error('Required parameter massendruckId was null or undefined when calling retryMassendruckJob$.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (auth-uat-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
        if (localVarCredential) {
            // using credentials
        }

        // authentication (auth-dev-bern) required
        localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
        if (localVarCredential) {
            // using credentials
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        const localVarPath = `/massendruck/${this.configuration.encodeParam({name: "massendruckId", value: massendruckId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/retry`;
        return this.httpClient.request<MassendruckJobDetail>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: <any>observe,
                reportProgress: reportProgress
            }
        );
    }

}
