/**
 * STIP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { Ausbildungsgang } from '../model/ausbildungsgang';
import { AusbildungsgangCreate } from '../model/ausbildungsgangCreate';
import { AusbildungsgangUpdate } from '../model/ausbildungsgangUpdate';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

export interface AusbildungsgangServiceCreateAusbildungsgangRequestParams {
  ausbildungsgangCreate: AusbildungsgangCreate;
}

export interface AusbildungsgangServiceDeleteAusbildungsgangRequestParams {
  ausbildungsgangId: string;
}

export interface AusbildungsgangServiceGetAusbildungsgangRequestParams {
  ausbildungsgangId: string;
}

export interface AusbildungsgangServiceUpdateAusbildungsgangRequestParams {
  ausbildungsgangId: string;
  ausbildungsgangUpdate: AusbildungsgangUpdate;
}

@Injectable({
  providedIn: 'root',
})
export class AusbildungsgangService {
  protected basePath = '/api/v1';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (Array.isArray(basePath) && basePath.length > 0) {
        basePath = basePath[0];
      }

      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string,
  ): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string,
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10),
          );
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Creates a new Ausbildungsgang
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createAusbildungsgang$(
    requestParameters: AusbildungsgangServiceCreateAusbildungsgangRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<Ausbildungsgang>;
  public createAusbildungsgang$(
    requestParameters: AusbildungsgangServiceCreateAusbildungsgangRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<HttpResponse<Ausbildungsgang>>;
  public createAusbildungsgang$(
    requestParameters: AusbildungsgangServiceCreateAusbildungsgangRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<HttpEvent<Ausbildungsgang>>;
  public createAusbildungsgang$(
    requestParameters: AusbildungsgangServiceCreateAusbildungsgangRequestParams,
    observe: 'body' | 'response' | 'events' = 'body',
    reportProgress = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<any> {
    const ausbildungsgangCreate = requestParameters.ausbildungsgangCreate;
    if (ausbildungsgangCreate === null || ausbildungsgangCreate === undefined) {
      throw new Error(
        'Required parameter ausbildungsgangCreate was null or undefined when calling createAusbildungsgang$.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (auth-uat-bern) required
    localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
    if (localVarCredential) {
      // using credentials
    }

    // authentication (auth-dev-bern) required
    localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
    if (localVarCredential) {
      // using credentials
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json', 'text/plain'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Content-Type',
        httpContentTypeSelected,
      );
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    const localVarPath = `/ausbildungsgang`;
    return this.httpClient.request<Ausbildungsgang>(
      'post',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: ausbildungsgangCreate,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: <any>observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * delete a Ausbildungsgang
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteAusbildungsgang$(
    requestParameters: AusbildungsgangServiceDeleteAusbildungsgangRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any>;
  public deleteAusbildungsgang$(
    requestParameters: AusbildungsgangServiceDeleteAusbildungsgangRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteAusbildungsgang$(
    requestParameters: AusbildungsgangServiceDeleteAusbildungsgangRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteAusbildungsgang$(
    requestParameters: AusbildungsgangServiceDeleteAusbildungsgangRequestParams,
    observe: 'body' | 'response' | 'events' = 'body',
    reportProgress = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any> {
    const ausbildungsgangId = requestParameters.ausbildungsgangId;
    if (ausbildungsgangId === null || ausbildungsgangId === undefined) {
      throw new Error(
        'Required parameter ausbildungsgangId was null or undefined when calling deleteAusbildungsgang$.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (auth-uat-bern) required
    localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
    if (localVarCredential) {
      // using credentials
    }

    // authentication (auth-dev-bern) required
    localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
    if (localVarCredential) {
      // using credentials
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    const localVarPath = `/ausbildungsgang/${this.configuration.encodeParam({
      name: 'ausbildungsgangId',
      value: ausbildungsgangId,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'string',
      dataFormat: 'uuid',
    })}`;
    return this.httpClient.request<any>(
      'delete',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: <any>observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * return der Ausbildungsgang
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAusbildungsgang$(
    requestParameters: AusbildungsgangServiceGetAusbildungsgangRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<Ausbildungsgang>;
  public getAusbildungsgang$(
    requestParameters: AusbildungsgangServiceGetAusbildungsgangRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<HttpResponse<Ausbildungsgang>>;
  public getAusbildungsgang$(
    requestParameters: AusbildungsgangServiceGetAusbildungsgangRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<HttpEvent<Ausbildungsgang>>;
  public getAusbildungsgang$(
    requestParameters: AusbildungsgangServiceGetAusbildungsgangRequestParams,
    observe: 'body' | 'response' | 'events' = 'body',
    reportProgress = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<any> {
    const ausbildungsgangId = requestParameters.ausbildungsgangId;
    if (ausbildungsgangId === null || ausbildungsgangId === undefined) {
      throw new Error(
        'Required parameter ausbildungsgangId was null or undefined when calling getAusbildungsgang$.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (auth-uat-bern) required
    localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
    if (localVarCredential) {
      // using credentials
    }

    // authentication (auth-dev-bern) required
    localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
    if (localVarCredential) {
      // using credentials
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json', 'text/plain'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    const localVarPath = `/ausbildungsgang/${this.configuration.encodeParam({
      name: 'ausbildungsgangId',
      value: ausbildungsgangId,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'string',
      dataFormat: 'uuid',
    })}`;
    return this.httpClient.request<Ausbildungsgang>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: <any>observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Updates a Ausbildungsgang with the given ID
   * @param requestParameters
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateAusbildungsgang$(
    requestParameters: AusbildungsgangServiceUpdateAusbildungsgangRequestParams,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<Ausbildungsgang>;
  public updateAusbildungsgang$(
    requestParameters: AusbildungsgangServiceUpdateAusbildungsgangRequestParams,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<HttpResponse<Ausbildungsgang>>;
  public updateAusbildungsgang$(
    requestParameters: AusbildungsgangServiceUpdateAusbildungsgangRequestParams,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<HttpEvent<Ausbildungsgang>>;
  public updateAusbildungsgang$(
    requestParameters: AusbildungsgangServiceUpdateAusbildungsgangRequestParams,
    observe: 'body' | 'response' | 'events' = 'body',
    reportProgress = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'text/plain';
      context?: HttpContext;
    },
  ): Observable<any> {
    const ausbildungsgangId = requestParameters.ausbildungsgangId;
    if (ausbildungsgangId === null || ausbildungsgangId === undefined) {
      throw new Error(
        'Required parameter ausbildungsgangId was null or undefined when calling updateAusbildungsgang$.',
      );
    }
    const ausbildungsgangUpdate = requestParameters.ausbildungsgangUpdate;
    if (ausbildungsgangUpdate === null || ausbildungsgangUpdate === undefined) {
      throw new Error(
        'Required parameter ausbildungsgangUpdate was null or undefined when calling updateAusbildungsgang$.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (auth-uat-bern) required
    localVarCredential = this.configuration.lookupCredential('auth-uat-bern');
    if (localVarCredential) {
      // using credentials
    }

    // authentication (auth-dev-bern) required
    localVarCredential = this.configuration.lookupCredential('auth-dev-bern');
    if (localVarCredential) {
      // using credentials
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json', 'text/plain'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Content-Type',
        httpContentTypeSelected,
      );
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    const localVarPath = `/ausbildungsgang/${this.configuration.encodeParam({
      name: 'ausbildungsgangId',
      value: ausbildungsgangId,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'string',
      dataFormat: 'uuid',
    })}`;
    return this.httpClient.request<Ausbildungsgang>(
      'put',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: ausbildungsgangUpdate,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: <any>observe,
        reportProgress: reportProgress,
      },
    );
  }
}
